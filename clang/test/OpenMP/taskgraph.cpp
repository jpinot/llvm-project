// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs
// REQUIRES: x86-registered-target
// RUN: %clang_cc1 -triple x86_64-unknown-unknown -verify -fopenmp -fopenmp-taskgraph -emit-llvm \
// RUN:            -emit-llvm -o - %s | FileCheck --check-prefixes=CHECK-O0 %s
// RUN: %clang_cc1 -triple x86_64-unknown-unknown -O2 -verify -fopenmp -fopenmp-taskgraph \
// RUN:            -emit-llvm -o - %s | FileCheck --check-prefixes=CHECK-O2 %s
// RUN: %clang_cc1 -triple x86_64-unknown-unknown -verify -fopenmp  -fopenmp-taskgraph \
// RUN:            -emit-llvm -debug-info-kind=limited %s  -o - | \
// RUN:            FileCheck --check-prefixes=CHECK-DEBUG %s

// Next line is for -verify
// expected-no-diagnostics

extern void foo();

void empty_taskgraph(void) {
#pragma omp taskgraph
  {
    foo();
  }
}

void one_task(void) {
#pragma omp taskgraph
  {
#pragma omp task
    {
      foo();
    }
  }
}

void loop_of_tasks(int N) {
#pragma omp taskgraph
  {
    for (int i = 0; i < N; i++)
#pragma omp task
    {
      foo();
    }
  }
}
// CHECK-O0-LABEL: @_Z15empty_taskgraphv(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON:%.*]], align 1
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1:@.*]])
// CHECK-O0-NEXT:    [[TMP1:%.*]] = bitcast %struct.anon* [[AGG_CAPTURED]] to i8*
// CHECK-O0-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon*)* @__captured_stmt to i8*), i8* [[TMP1]], i32 0)
// CHECK-O0-NEXT:    ret void
//
//
// CHECK-O0-LABEL: @__captured_stmt(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon*, align 8
// CHECK-O0-NEXT:    store %struct.anon* [[__CONTEXT:%.*]], %struct.anon** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP0:%.*]] = load %struct.anon*, %struct.anon** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    call void @_Z3foov()
// CHECK-O0-NEXT:    ret void
//
//
// CHECK-O0-LABEL: @_Z8one_taskv(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_0:%.*]], align 1
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O0-NEXT:    [[TMP1:%.*]] = bitcast %struct.anon.0* [[AGG_CAPTURED]] to i8*
// CHECK-O0-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.0*)* @__captured_stmt.1 to i8*), i8* [[TMP1]], i32 0)
// CHECK-O0-NEXT:    ret void
//
//
// CHECK-O0-LABEL: @__captured_stmt.1(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.0*, align 8
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_1:%.*]], align 1
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O0-NEXT:    store %struct.anon.0* [[__CONTEXT:%.*]], %struct.anon.0** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP1:%.*]] = load %struct.anon.0*, %struct.anon.0** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP2:%.*]] = call i8* @__kmpc_omp_task_alloc(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates*)* @.omp_task_entry. to i32 (i32, i8*)*))
// CHECK-O0-NEXT:    [[TMP3:%.*]] = load i32, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[TMP4:%.*]] = add i32 [[TMP3]], 1
// CHECK-O0-NEXT:    store i32 [[TMP4]], i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    call void @__kmpc_set_task_static_id(i8* [[TMP2]], i32 [[TMP4]])
// CHECK-O0-NEXT:    [[TMP5:%.*]] = bitcast i8* [[TMP2]] to %struct.kmp_task_t_with_privates*
// CHECK-O0-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], %struct.kmp_task_t_with_privates* [[TMP5]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP7:%.*]] = call i32 @__kmpc_omp_task(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* [[TMP2]])
// CHECK-O0-NEXT:    ret void
//
//
// CHECK-O0-LABEL: @.omp_task_entry.(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[DOTGLOBAL_TID__ADDR_I:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[DOTPART_ID__ADDR_I:%.*]] = alloca i32*, align 8
// CHECK-O0-NEXT:    [[DOTPRIVATES__ADDR_I:%.*]] = alloca i8*, align 8
// CHECK-O0-NEXT:    [[DOTCOPY_FN__ADDR_I:%.*]] = alloca void (i8*, ...)*, align 8
// CHECK-O0-NEXT:    [[DOTTASK_T__ADDR_I:%.*]] = alloca i8*, align 8
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR_I:%.*]] = alloca %struct.anon.1*, align 8
// CHECK-O0-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[DOTADDR1:%.*]] = alloca %struct.kmp_task_t_with_privates*, align 8
// CHECK-O0-NEXT:    store i32 [[TMP0:%.*]], i32* [[DOTADDR]], align 4
// CHECK-O0-NEXT:    store %struct.kmp_task_t_with_privates* [[TMP1:%.*]], %struct.kmp_task_t_with_privates** [[DOTADDR1]], align 8
// CHECK-O0-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTADDR]], align 4
// CHECK-O0-NEXT:    [[TMP3:%.*]] = load %struct.kmp_task_t_with_privates*, %struct.kmp_task_t_with_privates** [[DOTADDR1]], align 8
// CHECK-O0-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], %struct.kmp_task_t_with_privates* [[TMP3]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 2
// CHECK-O0-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP7:%.*]] = load i8*, i8** [[TMP6]], align 8
// CHECK-O0-NEXT:    [[TMP8:%.*]] = bitcast i8* [[TMP7]] to %struct.anon.1*
// CHECK-O0-NEXT:    [[TMP9:%.*]] = bitcast %struct.kmp_task_t_with_privates* [[TMP3]] to i8*
// CHECK-O0-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !2)
// CHECK-O0-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !5)
// CHECK-O0-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !7)
// CHECK-O0-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !9)
// CHECK-O0-NEXT:    store i32 [[TMP2]], i32* [[DOTGLOBAL_TID__ADDR_I]], align 4, !noalias !11
// CHECK-O0-NEXT:    store i32* [[TMP5]], i32** [[DOTPART_ID__ADDR_I]], align 8, !noalias !11
// CHECK-O0-NEXT:    store i8* null, i8** [[DOTPRIVATES__ADDR_I]], align 8, !noalias !11
// CHECK-O0-NEXT:    store void (i8*, ...)* null, void (i8*, ...)** [[DOTCOPY_FN__ADDR_I]], align 8, !noalias !11
// CHECK-O0-NEXT:    store i8* [[TMP9]], i8** [[DOTTASK_T__ADDR_I]], align 8, !noalias !11
// CHECK-O0-NEXT:    store %struct.anon.1* [[TMP8]], %struct.anon.1** [[__CONTEXT_ADDR_I]], align 8, !noalias !11
// CHECK-O0-NEXT:    [[TMP10:%.*]] = load %struct.anon.1*, %struct.anon.1** [[__CONTEXT_ADDR_I]], align 8, !noalias !11
// CHECK-O0-NEXT:    call void @_Z3foov() [[ATTR3:#.*]]
// CHECK-O0-NEXT:    ret i32 0
//
//
// CHECK-O0-LABEL: @_Z13loop_of_tasksi(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_2:%.*]], align 8
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O0-NEXT:    store i32 [[N:%.*]], i32* [[N_ADDR]], align 4
// CHECK-O0-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_2]], %struct.anon.2* [[AGG_CAPTURED]], i32 0, i32 0
// CHECK-O0-NEXT:    store i32* [[N_ADDR]], i32** [[TMP1]], align 8
// CHECK-O0-NEXT:    [[TMP2:%.*]] = bitcast %struct.anon.2* [[AGG_CAPTURED]] to i8*
// CHECK-O0-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.2*)* @__captured_stmt.2 to i8*), i8* [[TMP2]], i32 0)
// CHECK-O0-NEXT:    ret void
//
//
// CHECK-O0-LABEL: @__captured_stmt.2(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.2*, align 8
// CHECK-O0-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_3:%.*]], align 1
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O0-NEXT:    store %struct.anon.2* [[__CONTEXT:%.*]], %struct.anon.2** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP1:%.*]] = load %struct.anon.2*, %struct.anon.2** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    store i32 0, i32* [[I]], align 4
// CHECK-O0-NEXT:    br label [[FOR_COND:%.*]]
// CHECK-O0:       for.cond:
// CHECK-O0-NEXT:    [[TMP2:%.*]] = load i32, i32* [[I]], align 4
// CHECK-O0-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_2:%.*]], %struct.anon.2* [[TMP1]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP4:%.*]] = load i32*, i32** [[TMP3]], align 8
// CHECK-O0-NEXT:    [[TMP5:%.*]] = load i32, i32* [[TMP4]], align 4
// CHECK-O0-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP2]], [[TMP5]]
// CHECK-O0-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]]
// CHECK-O0:       for.body:
// CHECK-O0-NEXT:    [[TMP6:%.*]] = call i8* @__kmpc_omp_task_alloc(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates.4*)* @.omp_task_entry..4 to i32 (i32, i8*)*))
// CHECK-O0-NEXT:    [[TMP7:%.*]] = load i32, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], 1
// CHECK-O0-NEXT:    store i32 [[TMP8]], i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    call void @__kmpc_set_task_static_id(i8* [[TMP6]], i32 [[TMP8]])
// CHECK-O0-NEXT:    [[TMP9:%.*]] = bitcast i8* [[TMP6]] to %struct.kmp_task_t_with_privates.4*
// CHECK-O0-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_4:%.*]], %struct.kmp_task_t_with_privates.4* [[TMP9]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP11:%.*]] = call i32 @__kmpc_omp_task(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* [[TMP6]])
// CHECK-O0-NEXT:    br label [[FOR_INC:%.*]]
// CHECK-O0:       for.inc:
// CHECK-O0-NEXT:    [[TMP12:%.*]] = load i32, i32* [[I]], align 4
// CHECK-O0-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP12]], 1
// CHECK-O0-NEXT:    store i32 [[INC]], i32* [[I]], align 4
// CHECK-O0-NEXT:    br label [[FOR_COND]], [[LOOP12:!llvm.loop !.*]]
// CHECK-O0:       for.end:
// CHECK-O0-NEXT:    ret void
//
//
// CHECK-O0-LABEL: @.omp_task_entry..4(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[DOTGLOBAL_TID__ADDR_I:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[DOTPART_ID__ADDR_I:%.*]] = alloca i32*, align 8
// CHECK-O0-NEXT:    [[DOTPRIVATES__ADDR_I:%.*]] = alloca i8*, align 8
// CHECK-O0-NEXT:    [[DOTCOPY_FN__ADDR_I:%.*]] = alloca void (i8*, ...)*, align 8
// CHECK-O0-NEXT:    [[DOTTASK_T__ADDR_I:%.*]] = alloca i8*, align 8
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR_I:%.*]] = alloca %struct.anon.3*, align 8
// CHECK-O0-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[DOTADDR1:%.*]] = alloca %struct.kmp_task_t_with_privates.4*, align 8
// CHECK-O0-NEXT:    store i32 [[TMP0:%.*]], i32* [[DOTADDR]], align 4
// CHECK-O0-NEXT:    store %struct.kmp_task_t_with_privates.4* [[TMP1:%.*]], %struct.kmp_task_t_with_privates.4** [[DOTADDR1]], align 8
// CHECK-O0-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTADDR]], align 4
// CHECK-O0-NEXT:    [[TMP3:%.*]] = load %struct.kmp_task_t_with_privates.4*, %struct.kmp_task_t_with_privates.4** [[DOTADDR1]], align 8
// CHECK-O0-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_4:%.*]], %struct.kmp_task_t_with_privates.4* [[TMP3]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 2
// CHECK-O0-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP7:%.*]] = load i8*, i8** [[TMP6]], align 8
// CHECK-O0-NEXT:    [[TMP8:%.*]] = bitcast i8* [[TMP7]] to %struct.anon.3*
// CHECK-O0-NEXT:    [[TMP9:%.*]] = bitcast %struct.kmp_task_t_with_privates.4* [[TMP3]] to i8*
// CHECK-O0-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !14)
// CHECK-O0-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !17)
// CHECK-O0-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !19)
// CHECK-O0-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !21)
// CHECK-O0-NEXT:    store i32 [[TMP2]], i32* [[DOTGLOBAL_TID__ADDR_I]], align 4, !noalias !23
// CHECK-O0-NEXT:    store i32* [[TMP5]], i32** [[DOTPART_ID__ADDR_I]], align 8, !noalias !23
// CHECK-O0-NEXT:    store i8* null, i8** [[DOTPRIVATES__ADDR_I]], align 8, !noalias !23
// CHECK-O0-NEXT:    store void (i8*, ...)* null, void (i8*, ...)** [[DOTCOPY_FN__ADDR_I]], align 8, !noalias !23
// CHECK-O0-NEXT:    store i8* [[TMP9]], i8** [[DOTTASK_T__ADDR_I]], align 8, !noalias !23
// CHECK-O0-NEXT:    store %struct.anon.3* [[TMP8]], %struct.anon.3** [[__CONTEXT_ADDR_I]], align 8, !noalias !23
// CHECK-O0-NEXT:    [[TMP10:%.*]] = load %struct.anon.3*, %struct.anon.3** [[__CONTEXT_ADDR_I]], align 8, !noalias !23
// CHECK-O0-NEXT:    call void @_Z3foov() [[ATTR3]]
// CHECK-O0-NEXT:    ret i32 0
//
//
// CHECK-O2-LABEL: @_Z15empty_taskgraphv(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[AGG_CAPTURED:%.*]] = alloca i8, align 1
// CHECK-O2-NEXT:    [[TMP0:%.*]] = tail call i32 @__kmpc_global_thread_num(%struct.ident_t* nonnull [[GLOB1:@.*]])
// CHECK-O2-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* nonnull [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon*)* @__captured_stmt to i8*), i8* nonnull [[AGG_CAPTURED]], i32 0) [[ATTR3:#.*]]
// CHECK-O2-NEXT:    ret void
//
//
// CHECK-O2-LABEL: @__captured_stmt(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    tail call void @_Z3foov() [[ATTR3]]
// CHECK-O2-NEXT:    ret void
//
//
// CHECK-O2-LABEL: @_Z8one_taskv(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[AGG_CAPTURED:%.*]] = alloca i8, align 1
// CHECK-O2-NEXT:    [[TMP0:%.*]] = tail call i32 @__kmpc_global_thread_num(%struct.ident_t* nonnull [[GLOB1]])
// CHECK-O2-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* nonnull [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.0*)* @__captured_stmt.1 to i8*), i8* nonnull [[AGG_CAPTURED]], i32 0) [[ATTR3]]
// CHECK-O2-NEXT:    ret void
//
//
// CHECK-O2-LABEL: @__captured_stmt.1(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    [[TMP0:%.*]] = tail call i32 @__kmpc_global_thread_num(%struct.ident_t* nonnull [[GLOB1]])
// CHECK-O2-NEXT:    [[TMP1:%.*]] = tail call i8* @__kmpc_omp_task_alloc(%struct.ident_t* nonnull [[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates*)* @.omp_task_entry. to i32 (i32, i8*)*))
// CHECK-O2-NEXT:    [[TMP2:%.*]] = load i32, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    [[TMP3:%.*]] = add i32 [[TMP2]], 1
// CHECK-O2-NEXT:    store i32 [[TMP3]], i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    tail call void @__kmpc_set_task_static_id(i8* [[TMP1]], i32 [[TMP3]]) [[ATTR3]]
// CHECK-O2-NEXT:    [[TMP4:%.*]] = tail call i32 @__kmpc_omp_task(%struct.ident_t* nonnull [[GLOB1]], i32 [[TMP0]], i8* [[TMP1]])
// CHECK-O2-NEXT:    ret void
//
//
// CHECK-O2-LABEL: @.omp_task_entry.(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    tail call void @_Z3foov() [[ATTR3]]
// CHECK-O2-NEXT:    ret i32 0
//
//
// CHECK-O2-LABEL: @_Z13loop_of_tasksi(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-O2-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_2:%.*]], align 8
// CHECK-O2-NEXT:    [[TMP0:%.*]] = tail call i32 @__kmpc_global_thread_num(%struct.ident_t* nonnull [[GLOB1]])
// CHECK-O2-NEXT:    store i32 [[N:%.*]], i32* [[N_ADDR]], align 4, [[TBAA2:!tbaa !.*]]
// CHECK-O2-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_2]], %struct.anon.2* [[AGG_CAPTURED]], i64 0, i32 0
// CHECK-O2-NEXT:    store i32* [[N_ADDR]], i32** [[TMP1]], align 8, [[TBAA6:!tbaa !.*]]
// CHECK-O2-NEXT:    [[TMP2:%.*]] = bitcast %struct.anon.2* [[AGG_CAPTURED]] to i8*
// CHECK-O2-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* nonnull [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.2*)* @__captured_stmt.2 to i8*), i8* nonnull [[TMP2]], i32 0) [[ATTR3]]
// CHECK-O2-NEXT:    ret void
//
//
// CHECK-O2-LABEL: @__captured_stmt.2(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    [[TMP0:%.*]] = tail call i32 @__kmpc_global_thread_num(%struct.ident_t* nonnull [[GLOB1]])
// CHECK-O2-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_2:%.*]], %struct.anon.2* [[__CONTEXT:%.*]], i64 0, i32 0
// CHECK-O2-NEXT:    [[TMP2:%.*]] = load i32*, i32** [[TMP1]], align 8, [[TBAA8:!tbaa !.*]]
// CHECK-O2-NEXT:    [[TMP3:%.*]] = load i32, i32* [[TMP2]], align 4, [[TBAA2]]
// CHECK-O2-NEXT:    [[CMP3:%.*]] = icmp sgt i32 [[TMP3]], 0
// CHECK-O2-NEXT:    br i1 [[CMP3]], label [[FOR_BODY:%.*]], label [[FOR_COND_CLEANUP:%.*]]
// CHECK-O2:       for.cond.cleanup:
// CHECK-O2-NEXT:    ret void
// CHECK-O2:       for.body:
// CHECK-O2-NEXT:    [[I_04:%.*]] = phi i32 [ [[INC:%.*]], [[FOR_BODY]] ], [ 0, [[ENTRY:%.*]] ]
// CHECK-O2-NEXT:    [[TMP4:%.*]] = tail call i8* @__kmpc_omp_task_alloc(%struct.ident_t* nonnull [[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates.4*)* @.omp_task_entry..4 to i32 (i32, i8*)*))
// CHECK-O2-NEXT:    [[TMP5:%.*]] = load i32, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    [[TMP6:%.*]] = add i32 [[TMP5]], 1
// CHECK-O2-NEXT:    store i32 [[TMP6]], i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    tail call void @__kmpc_set_task_static_id(i8* [[TMP4]], i32 [[TMP6]]) [[ATTR3]]
// CHECK-O2-NEXT:    [[TMP7:%.*]] = tail call i32 @__kmpc_omp_task(%struct.ident_t* nonnull [[GLOB1]], i32 [[TMP0]], i8* [[TMP4]])
// CHECK-O2-NEXT:    [[INC]] = add nuw nsw i32 [[I_04]], 1
// CHECK-O2-NEXT:    [[TMP8:%.*]] = load i32, i32* [[TMP2]], align 4, [[TBAA2]]
// CHECK-O2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[INC]], [[TMP8]]
// CHECK-O2-NEXT:    br i1 [[CMP]], label [[FOR_BODY]], label [[FOR_COND_CLEANUP]], [[LOOP10:!llvm.loop !.*]]
//
//
// CHECK-O2-LABEL: @.omp_task_entry..4(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    tail call void @_Z3foov() [[ATTR3]]
// CHECK-O2-NEXT:    ret i32 0
//
//
// CHECK-DEBUG-LABEL: @_Z15empty_taskgraphv(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1:@.*]])
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = bitcast %struct.anon* [[AGG_CAPTURED]] to i8*, [[DBG10:!dbg !.*]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon*)* @__captured_stmt to i8*), i8* [[TMP1]], i32 0), [[DBG10]]
// CHECK-DEBUG-NEXT:    ret void, [[DBG11:!dbg !.*]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon*, align 8
// CHECK-DEBUG-NEXT:    store %struct.anon* [[__CONTEXT:%.*]], %struct.anon** [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata %struct.anon** [[__CONTEXT_ADDR]], [[META20:metadata !.*]], metadata !DIExpression()), [[DBG21:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = load %struct.anon*, %struct.anon** [[__CONTEXT_ADDR]], align 8, [[DBG22:!dbg !.*]]
// CHECK-DEBUG-NEXT:    call void @_Z3foov(), [[DBG24:!dbg !.*]]
// CHECK-DEBUG-NEXT:    ret void, [[DBG26:!dbg !.*]]
//
//
// CHECK-DEBUG-LABEL: @_Z8one_taskv(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_0:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB5:@.*]])
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = bitcast %struct.anon.0* [[AGG_CAPTURED]] to i8*, [[DBG28:!dbg !.*]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB5]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.0*)* @__captured_stmt.1 to i8*), i8* [[TMP1]], i32 0), [[DBG28]]
// CHECK-DEBUG-NEXT:    ret void, [[DBG29:!dbg !.*]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt.1(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.0*, align 8
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_1:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB3:@.*]])
// CHECK-DEBUG-NEXT:    store %struct.anon.0* [[__CONTEXT:%.*]], %struct.anon.0** [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata %struct.anon.0** [[__CONTEXT_ADDR]], [[META37:metadata !.*]], metadata !DIExpression()), [[DBG38:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = load %struct.anon.0*, %struct.anon.0** [[__CONTEXT_ADDR]], align 8, [[DBG39:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = call i8* @__kmpc_omp_task_alloc(%struct.ident_t* [[GLOB3]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates*)* @.omp_task_entry. to i32 (i32, i8*)*)), [[DBG41:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load i32, i32* @__staticTaskID, align 4, [[DBG41]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = add i32 [[TMP3]], 1, [[DBG41]]
// CHECK-DEBUG-NEXT:    store i32 [[TMP4]], i32* @__staticTaskID, align 4, [[DBG41]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_set_task_static_id(i8* [[TMP2]], i32 [[TMP4]]), [[DBG41]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = bitcast i8* [[TMP2]] to %struct.kmp_task_t_with_privates*, [[DBG41]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], %struct.kmp_task_t_with_privates* [[TMP5]], i32 0, i32 0, [[DBG41]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = call i32 @__kmpc_omp_task(%struct.ident_t* [[GLOB3]], i32 [[TMP0]], i8* [[TMP2]]), [[DBG41]]
// CHECK-DEBUG-NEXT:    ret void, [[DBG43:!dbg !.*]]
//
//
// CHECK-DEBUG-LABEL: @.omp_task_entry.(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTGLOBAL_TID__ADDR_I:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTPART_ID__ADDR_I:%.*]] = alloca i32*, align 8
// CHECK-DEBUG-NEXT:    [[DOTPRIVATES__ADDR_I:%.*]] = alloca i8*, align 8
// CHECK-DEBUG-NEXT:    [[DOTCOPY_FN__ADDR_I:%.*]] = alloca void (i8*, ...)*, align 8
// CHECK-DEBUG-NEXT:    [[DOTTASK_T__ADDR_I:%.*]] = alloca i8*, align 8
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR_I:%.*]] = alloca %struct.anon.1*, align 8
// CHECK-DEBUG-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTADDR1:%.*]] = alloca %struct.kmp_task_t_with_privates*, align 8
// CHECK-DEBUG-NEXT:    store i32 [[TMP0:%.*]], i32* [[DOTADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i32* [[DOTADDR]], [[META46:metadata !.*]], metadata !DIExpression()), [[DBG48:!dbg !.*]]
// CHECK-DEBUG-NEXT:    store %struct.kmp_task_t_with_privates* [[TMP1:%.*]], %struct.kmp_task_t_with_privates** [[DOTADDR1]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata %struct.kmp_task_t_with_privates** [[DOTADDR1]], [[META49:metadata !.*]], metadata !DIExpression()), [[DBG48]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTADDR]], align 4, [[DBG53:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load %struct.kmp_task_t_with_privates*, %struct.kmp_task_t_with_privates** [[DOTADDR1]], align 8, [[DBG53]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], %struct.kmp_task_t_with_privates* [[TMP3]], i32 0, i32 0, [[DBG53]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 2, [[DBG53]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 0, [[DBG53]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load i8*, i8** [[TMP6]], align 8, [[DBG53]]
// CHECK-DEBUG-NEXT:    [[TMP8:%.*]] = bitcast i8* [[TMP7]] to %struct.anon.1*, [[DBG53]]
// CHECK-DEBUG-NEXT:    [[TMP9:%.*]] = bitcast %struct.kmp_task_t_with_privates* [[TMP3]] to i8*, [[DBG53]]
// CHECK-DEBUG-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !54), [[DBG53]]
// CHECK-DEBUG-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !57), [[DBG53]]
// CHECK-DEBUG-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !59), [[DBG53]]
// CHECK-DEBUG-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !61), [[DBG53]]
// CHECK-DEBUG-NEXT:    store i32 [[TMP2]], i32* [[DOTGLOBAL_TID__ADDR_I]], align 4, !noalias !63
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i32* [[DOTGLOBAL_TID__ADDR_I]], [[META64:metadata !.*]], metadata !DIExpression()) [[ATTR4:#.*]], [[DBG85:!dbg !.*]]
// CHECK-DEBUG-NEXT:    store i32* [[TMP5]], i32** [[DOTPART_ID__ADDR_I]], align 8, !noalias !63
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i32** [[DOTPART_ID__ADDR_I]], [[META87:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG85]]
// CHECK-DEBUG-NEXT:    store i8* null, i8** [[DOTPRIVATES__ADDR_I]], align 8, !noalias !63
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i8** [[DOTPRIVATES__ADDR_I]], [[META88:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG85]]
// CHECK-DEBUG-NEXT:    store void (i8*, ...)* null, void (i8*, ...)** [[DOTCOPY_FN__ADDR_I]], align 8, !noalias !63
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata void (i8*, ...)** [[DOTCOPY_FN__ADDR_I]], [[META89:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG85]]
// CHECK-DEBUG-NEXT:    store i8* [[TMP9]], i8** [[DOTTASK_T__ADDR_I]], align 8, !noalias !63
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i8** [[DOTTASK_T__ADDR_I]], [[META90:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG85]]
// CHECK-DEBUG-NEXT:    store %struct.anon.1* [[TMP8]], %struct.anon.1** [[__CONTEXT_ADDR_I]], align 8, !noalias !63
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata %struct.anon.1** [[__CONTEXT_ADDR_I]], [[META91:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG85]]
// CHECK-DEBUG-NEXT:    [[TMP10:%.*]] = load %struct.anon.1*, %struct.anon.1** [[__CONTEXT_ADDR_I]], align 8, [[DBG92:!dbg !.*]], !noalias !63
// CHECK-DEBUG-NEXT:    call void @_Z3foov() [[ATTR4]], [[DBG94:!dbg !.*]]
// CHECK-DEBUG-NEXT:    ret i32 0, [[DBG53]]
//
//
// CHECK-DEBUG-LABEL: @_Z13loop_of_tasksi(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_2:%.*]], align 8
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB9:@.*]])
// CHECK-DEBUG-NEXT:    store i32 [[N:%.*]], i32* [[N_ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i32* [[N_ADDR]], [[META99:metadata !.*]], metadata !DIExpression()), [[DBG100:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_2]], %struct.anon.2* [[AGG_CAPTURED]], i32 0, i32 0, [[DBG101:!dbg !.*]]
// CHECK-DEBUG-NEXT:    store i32* [[N_ADDR]], i32** [[TMP1]], align 8, [[DBG101]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = bitcast %struct.anon.2* [[AGG_CAPTURED]] to i8*, [[DBG101]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB9]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.2*)* @__captured_stmt.2 to i8*), i8* [[TMP2]], i32 0), [[DBG101]]
// CHECK-DEBUG-NEXT:    ret void, [[DBG102:!dbg !.*]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt.2(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.2*, align 8
// CHECK-DEBUG-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_3:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB7:@.*]])
// CHECK-DEBUG-NEXT:    store %struct.anon.2* [[__CONTEXT:%.*]], %struct.anon.2** [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata %struct.anon.2** [[__CONTEXT_ADDR]], [[META110:metadata !.*]], metadata !DIExpression()), [[DBG111:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = load %struct.anon.2*, %struct.anon.2** [[__CONTEXT_ADDR]], align 8, [[DBG112:!dbg !.*]]
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i32* [[I]], [[META114:metadata !.*]], metadata !DIExpression()), [[DBG117:!dbg !.*]]
// CHECK-DEBUG-NEXT:    store i32 0, i32* [[I]], align 4, [[DBG117]]
// CHECK-DEBUG-NEXT:    br label [[FOR_COND:%.*]], [[DBG118:!dbg !.*]]
// CHECK-DEBUG:       for.cond:
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, i32* [[I]], align 4, [[DBG119:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_2:%.*]], %struct.anon.2* [[TMP1]], i32 0, i32 0, [[DBG121:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = load i32*, i32** [[TMP3]], align 8, [[DBG121]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = load i32, i32* [[TMP4]], align 4, [[DBG121]]
// CHECK-DEBUG-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP2]], [[TMP5]], [[DBG122:!dbg !.*]]
// CHECK-DEBUG-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]], [[DBG123:!dbg !.*]]
// CHECK-DEBUG:       for.body:
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = call i8* @__kmpc_omp_task_alloc(%struct.ident_t* [[GLOB7]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates.4*)* @.omp_task_entry..4 to i32 (i32, i8*)*)), [[DBG124:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load i32, i32* @__staticTaskID, align 4, [[DBG124]]
// CHECK-DEBUG-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], 1, [[DBG124]]
// CHECK-DEBUG-NEXT:    store i32 [[TMP8]], i32* @__staticTaskID, align 4, [[DBG124]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_set_task_static_id(i8* [[TMP6]], i32 [[TMP8]]), [[DBG124]]
// CHECK-DEBUG-NEXT:    [[TMP9:%.*]] = bitcast i8* [[TMP6]] to %struct.kmp_task_t_with_privates.4*, [[DBG124]]
// CHECK-DEBUG-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_4:%.*]], %struct.kmp_task_t_with_privates.4* [[TMP9]], i32 0, i32 0, [[DBG124]]
// CHECK-DEBUG-NEXT:    [[TMP11:%.*]] = call i32 @__kmpc_omp_task(%struct.ident_t* [[GLOB7]], i32 [[TMP0]], i8* [[TMP6]]), [[DBG124]]
// CHECK-DEBUG-NEXT:    br label [[FOR_INC:%.*]], [[DBG125:!dbg !.*]]
// CHECK-DEBUG:       for.inc:
// CHECK-DEBUG-NEXT:    [[TMP12:%.*]] = load i32, i32* [[I]], align 4, [[DBG127:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP12]], 1, [[DBG127]]
// CHECK-DEBUG-NEXT:    store i32 [[INC]], i32* [[I]], align 4, [[DBG127]]
// CHECK-DEBUG-NEXT:    br label [[FOR_COND]], [[DBG128:!dbg !.*]], [[LOOP129:!llvm.loop !.*]]
// CHECK-DEBUG:       for.end:
// CHECK-DEBUG-NEXT:    ret void, [[DBG132:!dbg !.*]]
//
//
// CHECK-DEBUG-LABEL: @.omp_task_entry..4(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTGLOBAL_TID__ADDR_I:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTPART_ID__ADDR_I:%.*]] = alloca i32*, align 8
// CHECK-DEBUG-NEXT:    [[DOTPRIVATES__ADDR_I:%.*]] = alloca i8*, align 8
// CHECK-DEBUG-NEXT:    [[DOTCOPY_FN__ADDR_I:%.*]] = alloca void (i8*, ...)*, align 8
// CHECK-DEBUG-NEXT:    [[DOTTASK_T__ADDR_I:%.*]] = alloca i8*, align 8
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR_I:%.*]] = alloca %struct.anon.3*, align 8
// CHECK-DEBUG-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTADDR1:%.*]] = alloca %struct.kmp_task_t_with_privates.4*, align 8
// CHECK-DEBUG-NEXT:    store i32 [[TMP0:%.*]], i32* [[DOTADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i32* [[DOTADDR]], [[META134:metadata !.*]], metadata !DIExpression()), [[DBG135:!dbg !.*]]
// CHECK-DEBUG-NEXT:    store %struct.kmp_task_t_with_privates.4* [[TMP1:%.*]], %struct.kmp_task_t_with_privates.4** [[DOTADDR1]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata %struct.kmp_task_t_with_privates.4** [[DOTADDR1]], [[META136:metadata !.*]], metadata !DIExpression()), [[DBG135]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTADDR]], align 4, [[DBG137:!dbg !.*]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load %struct.kmp_task_t_with_privates.4*, %struct.kmp_task_t_with_privates.4** [[DOTADDR1]], align 8, [[DBG137]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_4:%.*]], %struct.kmp_task_t_with_privates.4* [[TMP3]], i32 0, i32 0, [[DBG137]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 2, [[DBG137]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 0, [[DBG137]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load i8*, i8** [[TMP6]], align 8, [[DBG137]]
// CHECK-DEBUG-NEXT:    [[TMP8:%.*]] = bitcast i8* [[TMP7]] to %struct.anon.3*, [[DBG137]]
// CHECK-DEBUG-NEXT:    [[TMP9:%.*]] = bitcast %struct.kmp_task_t_with_privates.4* [[TMP3]] to i8*, [[DBG137]]
// CHECK-DEBUG-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !138), [[DBG137]]
// CHECK-DEBUG-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !141), [[DBG137]]
// CHECK-DEBUG-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !143), [[DBG137]]
// CHECK-DEBUG-NEXT:    call void @llvm.experimental.noalias.scope.decl(metadata !145), [[DBG137]]
// CHECK-DEBUG-NEXT:    store i32 [[TMP2]], i32* [[DOTGLOBAL_TID__ADDR_I]], align 4, !noalias !147
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i32* [[DOTGLOBAL_TID__ADDR_I]], [[META148:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG156:!dbg !.*]]
// CHECK-DEBUG-NEXT:    store i32* [[TMP5]], i32** [[DOTPART_ID__ADDR_I]], align 8, !noalias !147
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i32** [[DOTPART_ID__ADDR_I]], [[META158:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG156]]
// CHECK-DEBUG-NEXT:    store i8* null, i8** [[DOTPRIVATES__ADDR_I]], align 8, !noalias !147
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i8** [[DOTPRIVATES__ADDR_I]], [[META159:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG156]]
// CHECK-DEBUG-NEXT:    store void (i8*, ...)* null, void (i8*, ...)** [[DOTCOPY_FN__ADDR_I]], align 8, !noalias !147
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata void (i8*, ...)** [[DOTCOPY_FN__ADDR_I]], [[META160:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG156]]
// CHECK-DEBUG-NEXT:    store i8* [[TMP9]], i8** [[DOTTASK_T__ADDR_I]], align 8, !noalias !147
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata i8** [[DOTTASK_T__ADDR_I]], [[META161:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG156]]
// CHECK-DEBUG-NEXT:    store %struct.anon.3* [[TMP8]], %struct.anon.3** [[__CONTEXT_ADDR_I]], align 8, !noalias !147
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata %struct.anon.3** [[__CONTEXT_ADDR_I]], [[META162:metadata !.*]], metadata !DIExpression()) [[ATTR4]], [[DBG156]]
// CHECK-DEBUG-NEXT:    [[TMP10:%.*]] = load %struct.anon.3*, %struct.anon.3** [[__CONTEXT_ADDR_I]], align 8, [[DBG163:!dbg !.*]], !noalias !147
// CHECK-DEBUG-NEXT:    call void @_Z3foov() [[ATTR4]], [[DBG165:!dbg !.*]]
// CHECK-DEBUG-NEXT:    ret i32 0, [[DBG137]]
//

// NOTE: Assertions have been autogenerated by utils/update_cc_test_checks.py UTC_ARGS: --include-generated-funcs
// REQUIRES: x86-registered-target
// RUN: %clang_cc1 -triple x86_64-unknown-unknown -verify -fopenmp -fopenmp-taskgraph -emit-llvm \
// RUN:    -emit-llvm -o - %s  -disable-llvm-passes | FileCheck --check-prefixes=CHECK %s
// RUN: %clang_cc1 -triple x86_64-unknown-unknown -verify -fopenmp  -fopenmp-taskgraph \
// RUN:    -emit-llvm -debug-info-kind=limited %s  -o - -disable-llvm-passes | \
// RUN:    FileCheck --check-prefixes=CHECK-DEBUG %s

// Next line is for -verify
// expected-no-diagnostics

extern void foo();

void empty_taskgraph(void) {
#pragma omp taskgraph
  {
    foo();
  }
}

void one_task(void) {
#pragma omp taskgraph
  {
#pragma omp task
    {
      foo();
    }
  }
}

void loop_of_tasks(int N) {
#pragma omp taskgraph
  {
    for (int i = 0; i < N; i++)
#pragma omp task
    {
      foo();
    }
  }
}

void one_task_with_constant_graph_id(void) {
#pragma omp taskgraph graph_id(1)
  {
#pragma omp task
    {
      foo();
    }
  }
}

void one_task_with_expr_graph_id(int N) {
#pragma omp taskgraph graph_id(N + 3)
  {
#pragma omp task
    {
      foo();
    }
  }
}

void one_task_with_constant_graph_reset(void) {
#pragma omp taskgraph graph_reset(true)
  {
#pragma omp task
    {
      foo();
    }
  }
}

void one_task_with_expr_graph_reset(int N) {
#pragma omp taskgraph graph_reset(N != 0)
  {
#pragma omp task
    {
      foo();
    }
  }
}

void loop_of_tasks_with_clauses(int N) {
#pragma omp taskgraph graph_id(1) graph_reset(false)
  {
    for (int i = 0; i < N; i++)
#pragma omp task
    {
      foo();
    }
  }
}
// CHECK-O0-LABEL: @_Z15empty_taskgraphv(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON:%.*]], align 1
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1:@.*]])
// CHECK-O0-NEXT:    [[TMP1:%.*]] = bitcast %struct.anon* [[AGG_CAPTURED]] to i8*
// CHECK-O0-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon*)* @__captured_stmt to i8*), i8* [[TMP1]], i32 0)
// CHECK-O0-NEXT:    ret void
// CHECK-O0-LABEL: @__captured_stmt(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon*, align 8
// CHECK-O0-NEXT:    store %struct.anon* [[__CONTEXT:%.*]], %struct.anon** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP0:%.*]] = load %struct.anon*, %struct.anon** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    call void @_Z3foov()
// CHECK-O0-NEXT:    ret void
// CHECK-O0-LABEL: @_Z8one_taskv(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_0:%.*]], align 1
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O0-NEXT:    [[TMP1:%.*]] = bitcast %struct.anon.0* [[AGG_CAPTURED]] to i8*
// CHECK-O0-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.0*)* @__captured_stmt.1 to i8*), i8* [[TMP1]], i32 0)
// CHECK-O0-NEXT:    ret void
// CHECK-O0-LABEL: @__captured_stmt.1(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.0*, align 8
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_1:%.*]], align 1
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O0-NEXT:    store %struct.anon.0* [[__CONTEXT:%.*]], %struct.anon.0** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP1:%.*]] = load %struct.anon.0*, %struct.anon.0** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP2:%.*]] = call i8* @__kmpc_omp_task_alloc(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates*)* @.omp_task_entry. to i32 (i32, i8*)*))
// CHECK-O0-NEXT:    [[TMP3:%.*]] = load i32, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[TMP4:%.*]] = add i32 [[TMP3]], 1
// CHECK-O0-NEXT:    store i32 [[TMP4]], i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    call void @__kmpc_set_task_static_id(i8* [[TMP2]], i32 [[TMP4]])
// CHECK-O0-NEXT:    [[TMP5:%.*]] = bitcast i8* [[TMP2]] to %struct.kmp_task_t_with_privates*
// CHECK-O0-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], %struct.kmp_task_t_with_privates* [[TMP5]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP7:%.*]] = call i32 @__kmpc_omp_task(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* [[TMP2]])
// CHECK-O0-NEXT:    ret void
// CHECK-O0-LABEL: @.omp_outlined.(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca i32*, align 8
// CHECK-O0-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca i8*, align 8
// CHECK-O0-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca void (i8*, ...)*, align 8
// CHECK-O0-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca i8*, align 8
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.1*, align 8
// CHECK-O0-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], i32* [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-O0-NEXT:    store i32* [[DOTPART_ID_:%.*]], i32** [[DOTPART_ID__ADDR]], align 8
// CHECK-O0-NEXT:    store i8* [[DOTPRIVATES_:%.*]], i8** [[DOTPRIVATES__ADDR]], align 8
// CHECK-O0-NEXT:    store void (i8*, ...)* [[DOTCOPY_FN_:%.*]], void (i8*, ...)** [[DOTCOPY_FN__ADDR]], align 8
// CHECK-O0-NEXT:    store i8* [[DOTTASK_T_:%.*]], i8** [[DOTTASK_T__ADDR]], align 8
// CHECK-O0-NEXT:    store %struct.anon.1* [[__CONTEXT:%.*]], %struct.anon.1** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP0:%.*]] = load %struct.anon.1*, %struct.anon.1** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    call void @_Z3foov()
// CHECK-O0-NEXT:    ret void
// CHECK-O0-LABEL: @.omp_task_entry.(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[DOTADDR1:%.*]] = alloca %struct.kmp_task_t_with_privates*, align 8
// CHECK-O0-NEXT:    store i32 [[TMP0:%.*]], i32* [[DOTADDR]], align 4
// CHECK-O0-NEXT:    store %struct.kmp_task_t_with_privates* [[TMP1:%.*]], %struct.kmp_task_t_with_privates** [[DOTADDR1]], align 8
// CHECK-O0-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTADDR]], align 4
// CHECK-O0-NEXT:    [[TMP3:%.*]] = load %struct.kmp_task_t_with_privates*, %struct.kmp_task_t_with_privates** [[DOTADDR1]], align 8
// CHECK-O0-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], %struct.kmp_task_t_with_privates* [[TMP3]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 2
// CHECK-O0-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP7:%.*]] = load i8*, i8** [[TMP6]], align 8
// CHECK-O0-NEXT:    [[TMP8:%.*]] = bitcast i8* [[TMP7]] to %struct.anon.1*
// CHECK-O0-NEXT:    [[TMP9:%.*]] = bitcast %struct.kmp_task_t_with_privates* [[TMP3]] to i8*
// CHECK-O0-NEXT:    call void @.omp_outlined.(i32 [[TMP2]], i32* [[TMP5]], i8* null, void (i8*, ...)* null, i8* [[TMP9]], %struct.anon.1* [[TMP8]]) [[ATTR3:#.*]]
// CHECK-O0-NEXT:    ret i32 0
// CHECK-O0-LABEL: @_Z13loop_of_tasksi(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_2:%.*]], align 8
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O0-NEXT:    store i32 [[N:%.*]], i32* [[N_ADDR]], align 4
// CHECK-O0-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_2]], %struct.anon.2* [[AGG_CAPTURED]], i32 0, i32 0
// CHECK-O0-NEXT:    store i32* [[N_ADDR]], i32** [[TMP1]], align 8
// CHECK-O0-NEXT:    [[TMP2:%.*]] = bitcast %struct.anon.2* [[AGG_CAPTURED]] to i8*
// CHECK-O0-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.2*)* @__captured_stmt.2 to i8*), i8* [[TMP2]], i32 0)
// CHECK-O0-NEXT:    ret void
// CHECK-O0-LABEL: @__captured_stmt.2(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.2*, align 8
// CHECK-O0-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_3:%.*]], align 1
// CHECK-O0-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O0-NEXT:    store %struct.anon.2* [[__CONTEXT:%.*]], %struct.anon.2** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP1:%.*]] = load %struct.anon.2*, %struct.anon.2** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    store i32 0, i32* [[I]], align 4
// CHECK-O0-NEXT:    br label [[FOR_COND:%.*]]
// CHECK-O0:       for.cond:
// CHECK-O0-NEXT:    [[TMP2:%.*]] = load i32, i32* [[I]], align 4
// CHECK-O0-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_2:%.*]], %struct.anon.2* [[TMP1]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP4:%.*]] = load i32*, i32** [[TMP3]], align 8
// CHECK-O0-NEXT:    [[TMP5:%.*]] = load i32, i32* [[TMP4]], align 4
// CHECK-O0-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP2]], [[TMP5]]
// CHECK-O0-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]]
// CHECK-O0:       for.body:
// CHECK-O0-NEXT:    [[TMP6:%.*]] = call i8* @__kmpc_omp_task_alloc(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates.4*)* @.omp_task_entry..4 to i32 (i32, i8*)*))
// CHECK-O0-NEXT:    [[TMP7:%.*]] = load i32, i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    [[TMP8:%.*]] = add i32 [[TMP7]], 1
// CHECK-O0-NEXT:    store i32 [[TMP8]], i32* @__staticTaskID, align 4
// CHECK-O0-NEXT:    call void @__kmpc_set_task_static_id(i8* [[TMP6]], i32 [[TMP8]])
// CHECK-O0-NEXT:    [[TMP9:%.*]] = bitcast i8* [[TMP6]] to %struct.kmp_task_t_with_privates.4*
// CHECK-O0-NEXT:    [[TMP10:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_4:%.*]], %struct.kmp_task_t_with_privates.4* [[TMP9]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP11:%.*]] = call i32 @__kmpc_omp_task(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* [[TMP6]])
// CHECK-O0-NEXT:    br label [[FOR_INC:%.*]]
// CHECK-O0:       for.inc:
// CHECK-O0-NEXT:    [[TMP12:%.*]] = load i32, i32* [[I]], align 4
// CHECK-O0-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP12]], 1
// CHECK-O0-NEXT:    store i32 [[INC]], i32* [[I]], align 4
// CHECK-O0-NEXT:    br label [[FOR_COND]], [[LOOP2:!llvm.loop !.*]]
// CHECK-O0:       for.end:
// CHECK-O0-NEXT:    ret void
// CHECK-O0-LABEL: @.omp_outlined..3(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca i32*, align 8
// CHECK-O0-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca i8*, align 8
// CHECK-O0-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca void (i8*, ...)*, align 8
// CHECK-O0-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca i8*, align 8
// CHECK-O0-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.3*, align 8
// CHECK-O0-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], i32* [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-O0-NEXT:    store i32* [[DOTPART_ID_:%.*]], i32** [[DOTPART_ID__ADDR]], align 8
// CHECK-O0-NEXT:    store i8* [[DOTPRIVATES_:%.*]], i8** [[DOTPRIVATES__ADDR]], align 8
// CHECK-O0-NEXT:    store void (i8*, ...)* [[DOTCOPY_FN_:%.*]], void (i8*, ...)** [[DOTCOPY_FN__ADDR]], align 8
// CHECK-O0-NEXT:    store i8* [[DOTTASK_T_:%.*]], i8** [[DOTTASK_T__ADDR]], align 8
// CHECK-O0-NEXT:    store %struct.anon.3* [[__CONTEXT:%.*]], %struct.anon.3** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    [[TMP0:%.*]] = load %struct.anon.3*, %struct.anon.3** [[__CONTEXT_ADDR]], align 8
// CHECK-O0-NEXT:    call void @_Z3foov()
// CHECK-O0-NEXT:    ret void
// CHECK-O0-LABEL: @.omp_task_entry..4(
// CHECK-O0-NEXT:  entry:
// CHECK-O0-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-O0-NEXT:    [[DOTADDR1:%.*]] = alloca %struct.kmp_task_t_with_privates.4*, align 8
// CHECK-O0-NEXT:    store i32 [[TMP0:%.*]], i32* [[DOTADDR]], align 4
// CHECK-O0-NEXT:    store %struct.kmp_task_t_with_privates.4* [[TMP1:%.*]], %struct.kmp_task_t_with_privates.4** [[DOTADDR1]], align 8
// CHECK-O0-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTADDR]], align 4
// CHECK-O0-NEXT:    [[TMP3:%.*]] = load %struct.kmp_task_t_with_privates.4*, %struct.kmp_task_t_with_privates.4** [[DOTADDR1]], align 8
// CHECK-O0-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_4:%.*]], %struct.kmp_task_t_with_privates.4* [[TMP3]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 2
// CHECK-O0-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 0
// CHECK-O0-NEXT:    [[TMP7:%.*]] = load i8*, i8** [[TMP6]], align 8
// CHECK-O0-NEXT:    [[TMP8:%.*]] = bitcast i8* [[TMP7]] to %struct.anon.3*
// CHECK-O0-NEXT:    [[TMP9:%.*]] = bitcast %struct.kmp_task_t_with_privates.4* [[TMP3]] to i8*
// CHECK-O0-NEXT:    call void @.omp_outlined..3(i32 [[TMP2]], i32* [[TMP5]], i8* null, void (i8*, ...)* null, i8* [[TMP9]], %struct.anon.3* [[TMP8]]) [[ATTR3]]
// CHECK-O0-NEXT:    ret i32 0
// CHECK-O2-LABEL: @_Z15empty_taskgraphv(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON:%.*]], align 1
// CHECK-O2-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1:@.*]])
// CHECK-O2-NEXT:    [[TMP1:%.*]] = bitcast %struct.anon* [[AGG_CAPTURED]] to i8*
// CHECK-O2-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon*)* @__captured_stmt to i8*), i8* [[TMP1]], i32 0)
// CHECK-O2-NEXT:    ret void
// CHECK-O2-LABEL: @__captured_stmt(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon*, align 8
// CHECK-O2-NEXT:    store %struct.anon* [[__CONTEXT:%.*]], %struct.anon** [[__CONTEXT_ADDR]], align 8, [[TBAA2:!tbaa !.*]]
// CHECK-O2-NEXT:    [[TMP0:%.*]] = load %struct.anon*, %struct.anon** [[__CONTEXT_ADDR]], align 8
// CHECK-O2-NEXT:    call void @_Z3foov()
// CHECK-O2-NEXT:    ret void
// CHECK-O2-LABEL: @_Z8one_taskv(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_0:%.*]], align 1
// CHECK-O2-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O2-NEXT:    [[TMP1:%.*]] = bitcast %struct.anon.0* [[AGG_CAPTURED]] to i8*
// CHECK-O2-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.0*)* @__captured_stmt.1 to i8*), i8* [[TMP1]], i32 0)
// CHECK-O2-NEXT:    ret void
// CHECK-O2-LABEL: @__captured_stmt.1(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.0*, align 8
// CHECK-O2-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_1:%.*]], align 1
// CHECK-O2-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O2-NEXT:    store %struct.anon.0* [[__CONTEXT:%.*]], %struct.anon.0** [[__CONTEXT_ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    [[TMP1:%.*]] = load %struct.anon.0*, %struct.anon.0** [[__CONTEXT_ADDR]], align 8
// CHECK-O2-NEXT:    [[TMP2:%.*]] = call i8* @__kmpc_omp_task_alloc(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates*)* @.omp_task_entry. to i32 (i32, i8*)*))
// CHECK-O2-NEXT:    [[TMP3:%.*]] = load i32, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    [[TMP4:%.*]] = add i32 [[TMP3]], 1
// CHECK-O2-NEXT:    store i32 [[TMP4]], i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    call void @__kmpc_set_task_static_id(i8* [[TMP2]], i32 [[TMP4]])
// CHECK-O2-NEXT:    [[TMP5:%.*]] = bitcast i8* [[TMP2]] to %struct.kmp_task_t_with_privates*
// CHECK-O2-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], %struct.kmp_task_t_with_privates* [[TMP5]], i32 0, i32 0
// CHECK-O2-NEXT:    [[TMP7:%.*]] = call i32 @__kmpc_omp_task(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* [[TMP2]])
// CHECK-O2-NEXT:    ret void
// CHECK-O2-LABEL: @.omp_outlined.(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-O2-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca i32*, align 8
// CHECK-O2-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca i8*, align 8
// CHECK-O2-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca void (i8*, ...)*, align 8
// CHECK-O2-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca i8*, align 8
// CHECK-O2-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.1*, align 8
// CHECK-O2-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], i32* [[DOTGLOBAL_TID__ADDR]], align 4, [[TBAA6:!tbaa !.*]]
// CHECK-O2-NEXT:    store i32* [[DOTPART_ID_:%.*]], i32** [[DOTPART_ID__ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    store i8* [[DOTPRIVATES_:%.*]], i8** [[DOTPRIVATES__ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    store void (i8*, ...)* [[DOTCOPY_FN_:%.*]], void (i8*, ...)** [[DOTCOPY_FN__ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    store i8* [[DOTTASK_T_:%.*]], i8** [[DOTTASK_T__ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    store %struct.anon.1* [[__CONTEXT:%.*]], %struct.anon.1** [[__CONTEXT_ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    [[TMP0:%.*]] = load %struct.anon.1*, %struct.anon.1** [[__CONTEXT_ADDR]], align 8
// CHECK-O2-NEXT:    call void @_Z3foov()
// CHECK-O2-NEXT:    ret void
// CHECK-O2-LABEL: @.omp_task_entry.(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-O2-NEXT:    [[DOTADDR1:%.*]] = alloca %struct.kmp_task_t_with_privates*, align 8
// CHECK-O2-NEXT:    store i32 [[TMP0:%.*]], i32* [[DOTADDR]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    store %struct.kmp_task_t_with_privates* [[TMP1:%.*]], %struct.kmp_task_t_with_privates** [[DOTADDR1]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTADDR]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    [[TMP3:%.*]] = load %struct.kmp_task_t_with_privates*, %struct.kmp_task_t_with_privates** [[DOTADDR1]], align 8
// CHECK-O2-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], %struct.kmp_task_t_with_privates* [[TMP3]], i32 0, i32 0
// CHECK-O2-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 2
// CHECK-O2-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 0
// CHECK-O2-NEXT:    [[TMP7:%.*]] = load i8*, i8** [[TMP6]], align 8, [[TBAA8:!tbaa !.*]]
// CHECK-O2-NEXT:    [[TMP8:%.*]] = bitcast i8* [[TMP7]] to %struct.anon.1*
// CHECK-O2-NEXT:    [[TMP9:%.*]] = bitcast %struct.kmp_task_t_with_privates* [[TMP3]] to i8*
// CHECK-O2-NEXT:    call void @.omp_outlined.(i32 [[TMP2]], i32* [[TMP5]], i8* null, void (i8*, ...)* null, i8* [[TMP9]], %struct.anon.1* [[TMP8]]) [[ATTR3:#.*]]
// CHECK-O2-NEXT:    ret i32 0
// CHECK-O2-LABEL: @_Z13loop_of_tasksi(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-O2-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_2:%.*]], align 8
// CHECK-O2-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O2-NEXT:    store i32 [[N:%.*]], i32* [[N_ADDR]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT_ANON_2]], %struct.anon.2* [[AGG_CAPTURED]], i32 0, i32 0
// CHECK-O2-NEXT:    store i32* [[N_ADDR]], i32** [[TMP1]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    [[TMP2:%.*]] = bitcast %struct.anon.2* [[AGG_CAPTURED]] to i8*
// CHECK-O2-NEXT:    call void @__kmpc_taskgraph(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* bitcast (void (%struct.anon.2*)* @__captured_stmt.2 to i8*), i8* [[TMP2]], i32 0)
// CHECK-O2-NEXT:    ret void
// CHECK-O2-LABEL: @__captured_stmt.2(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    store i32 0, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.2*, align 8
// CHECK-O2-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-O2-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_3:%.*]], align 1
// CHECK-O2-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(%struct.ident_t* [[GLOB1]])
// CHECK-O2-NEXT:    store %struct.anon.2* [[__CONTEXT:%.*]], %struct.anon.2** [[__CONTEXT_ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    [[TMP1:%.*]] = load %struct.anon.2*, %struct.anon.2** [[__CONTEXT_ADDR]], align 8
// CHECK-O2-NEXT:    [[TMP2:%.*]] = bitcast i32* [[I]] to i8*
// CHECK-O2-NEXT:    call void @llvm.lifetime.start.p0i8(i64 4, i8* [[TMP2]]) [[ATTR3]]
// CHECK-O2-NEXT:    store i32 0, i32* [[I]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    br label [[FOR_COND:%.*]]
// CHECK-O2:       for.cond:
// CHECK-O2-NEXT:    [[TMP3:%.*]] = load i32, i32* [[I]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_ANON_2:%.*]], %struct.anon.2* [[TMP1]], i32 0, i32 0
// CHECK-O2-NEXT:    [[TMP5:%.*]] = load i32*, i32** [[TMP4]], align 8, [[TBAA11:!tbaa !.*]]
// CHECK-O2-NEXT:    [[TMP6:%.*]] = load i32, i32* [[TMP5]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP3]], [[TMP6]]
// CHECK-O2-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_COND_CLEANUP:%.*]]
// CHECK-O2:       for.cond.cleanup:
// CHECK-O2-NEXT:    [[TMP7:%.*]] = bitcast i32* [[I]] to i8*
// CHECK-O2-NEXT:    call void @llvm.lifetime.end.p0i8(i64 4, i8* [[TMP7]]) [[ATTR3]]
// CHECK-O2-NEXT:    br label [[FOR_END:%.*]]
// CHECK-O2:       for.body:
// CHECK-O2-NEXT:    [[TMP8:%.*]] = call i8* @__kmpc_omp_task_alloc(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, i32 (i32, i8*)* bitcast (i32 (i32, %struct.kmp_task_t_with_privates.4*)* @.omp_task_entry..4 to i32 (i32, i8*)*))
// CHECK-O2-NEXT:    [[TMP9:%.*]] = load i32, i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1
// CHECK-O2-NEXT:    store i32 [[TMP10]], i32* @__staticTaskID, align 4
// CHECK-O2-NEXT:    call void @__kmpc_set_task_static_id(i8* [[TMP8]], i32 [[TMP10]])
// CHECK-O2-NEXT:    [[TMP11:%.*]] = bitcast i8* [[TMP8]] to %struct.kmp_task_t_with_privates.4*
// CHECK-O2-NEXT:    [[TMP12:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_4:%.*]], %struct.kmp_task_t_with_privates.4* [[TMP11]], i32 0, i32 0
// CHECK-O2-NEXT:    [[TMP13:%.*]] = call i32 @__kmpc_omp_task(%struct.ident_t* [[GLOB1]], i32 [[TMP0]], i8* [[TMP8]])
// CHECK-O2-NEXT:    br label [[FOR_INC:%.*]]
// CHECK-O2:       for.inc:
// CHECK-O2-NEXT:    [[TMP14:%.*]] = load i32, i32* [[I]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP14]], 1
// CHECK-O2-NEXT:    store i32 [[INC]], i32* [[I]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    br label [[FOR_COND]], [[LOOP13:!llvm.loop !.*]]
// CHECK-O2:       for.end:
// CHECK-O2-NEXT:    ret void
// CHECK-O2-LABEL: @.omp_outlined..3(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-O2-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca i32*, align 8
// CHECK-O2-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca i8*, align 8
// CHECK-O2-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca void (i8*, ...)*, align 8
// CHECK-O2-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca i8*, align 8
// CHECK-O2-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca %struct.anon.3*, align 8
// CHECK-O2-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], i32* [[DOTGLOBAL_TID__ADDR]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    store i32* [[DOTPART_ID_:%.*]], i32** [[DOTPART_ID__ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    store i8* [[DOTPRIVATES_:%.*]], i8** [[DOTPRIVATES__ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    store void (i8*, ...)* [[DOTCOPY_FN_:%.*]], void (i8*, ...)** [[DOTCOPY_FN__ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    store i8* [[DOTTASK_T_:%.*]], i8** [[DOTTASK_T__ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    store %struct.anon.3* [[__CONTEXT:%.*]], %struct.anon.3** [[__CONTEXT_ADDR]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    [[TMP0:%.*]] = load %struct.anon.3*, %struct.anon.3** [[__CONTEXT_ADDR]], align 8
// CHECK-O2-NEXT:    call void @_Z3foov()
// CHECK-O2-NEXT:    ret void
// CHECK-O2-LABEL: @.omp_task_entry..4(
// CHECK-O2-NEXT:  entry:
// CHECK-O2-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-O2-NEXT:    [[DOTADDR1:%.*]] = alloca %struct.kmp_task_t_with_privates.4*, align 8
// CHECK-O2-NEXT:    store i32 [[TMP0:%.*]], i32* [[DOTADDR]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    store %struct.kmp_task_t_with_privates.4* [[TMP1:%.*]], %struct.kmp_task_t_with_privates.4** [[DOTADDR1]], align 8, [[TBAA2]]
// CHECK-O2-NEXT:    [[TMP2:%.*]] = load i32, i32* [[DOTADDR]], align 4, [[TBAA6]]
// CHECK-O2-NEXT:    [[TMP3:%.*]] = load %struct.kmp_task_t_with_privates.4*, %struct.kmp_task_t_with_privates.4** [[DOTADDR1]], align 8
// CHECK-O2-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_4:%.*]], %struct.kmp_task_t_with_privates.4* [[TMP3]], i32 0, i32 0
// CHECK-O2-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 2
// CHECK-O2-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], %struct.kmp_task_t* [[TMP4]], i32 0, i32 0
// CHECK-O2-NEXT:    [[TMP7:%.*]] = load i8*, i8** [[TMP6]], align 8, [[TBAA8]]
// CHECK-O2-NEXT:    [[TMP8:%.*]] = bitcast i8* [[TMP7]] to %struct.anon.3*
// CHECK-O2-NEXT:    [[TMP9:%.*]] = bitcast %struct.kmp_task_t_with_privates.4* [[TMP3]] to i8*
// CHECK-O2-NEXT:    call void @.omp_outlined..3(i32 [[TMP2]], i32* [[TMP5]], i8* null, void (i8*, ...)* null, i8* [[TMP9]], %struct.anon.3* [[TMP8]]) [[ATTR3]]
// CHECK-O2-NEXT:    ret i32 0
// CHECK-LABEL: @_Z15empty_taskgraphv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1:[0-9]+]])
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i64 4)
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB1]], i32 [[TMP0]], i32 1535057903, ptr @__captured_stmt, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 0)
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @__captured_stmt(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    call void @_Z3foov()
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @_Z8one_taskv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_1:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i64 4)
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_0:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB1]], i32 [[TMP0]], i32 -417387910, ptr @__captured_stmt.1, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 0)
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @__captured_stmt.1(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_2:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry.)
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], ptr [[TMP2]], i32 0, i32 0
// CHECK-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB1]], i32 [[TMP0]], ptr [[TMP2]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_outlined.(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    call void @_Z3foov()
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_task_entry.(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], ptr [[TMP3]], i32 0, i32 0
// CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0
// CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
// CHECK-NEXT:    call void @.omp_outlined.(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1:[0-9]+]]
// CHECK-NEXT:    ret i32 0
//
//
// CHECK-LABEL: @_Z13loop_of_tasksi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_4:%.*]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store i32 [[N:%.*]], ptr [[N_ADDR]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i64 4)
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_3:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_4]], ptr [[AGG_CAPTURED]], i32 0, i32 0
// CHECK-NEXT:    store ptr [[N_ADDR]], ptr [[TMP3]], align 8
// CHECK-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB1]], i32 [[TMP0]], i32 -434165529, ptr @__captured_stmt.2, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 0)
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @__captured_stmt.2(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_5:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    store i32 0, ptr [[I]], align 4
// CHECK-NEXT:    br label [[FOR_COND:%.*]]
// CHECK:       for.cond:
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[I]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_4:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP3]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4
// CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP2]], [[TMP5]]
// CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]]
// CHECK:       for.body:
// CHECK-NEXT:    [[TMP6:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..4)
// CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_6:%.*]], ptr [[TMP6]], i32 0, i32 0
// CHECK-NEXT:    [[TMP8:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB1]], i32 [[TMP0]], ptr [[TMP6]])
// CHECK-NEXT:    br label [[FOR_INC:%.*]]
// CHECK:       for.inc:
// CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[I]], align 4
// CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP9]], 1
// CHECK-NEXT:    store i32 [[INC]], ptr [[I]], align 4
// CHECK-NEXT:    br label [[FOR_COND]], !llvm.loop [[LOOP3:![0-9]+]]
// CHECK:       for.end:
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_outlined..3(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    call void @_Z3foov()
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_task_entry..4(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_6:%.*]], ptr [[TMP3]], i32 0, i32 0
// CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0
// CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
// CHECK-NEXT:    call void @.omp_outlined..3(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]]
// CHECK-NEXT:    ret i32 0
//
//
// CHECK-LABEL: @_Z31one_task_with_constant_graph_idv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_8:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i64 4)
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_7:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB1]], i32 [[TMP0]], i32 -484498386, ptr @__captured_stmt.5, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 1, i32 0)
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @__captured_stmt.5(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_9:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..7)
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_10:%.*]], ptr [[TMP2]], i32 0, i32 0
// CHECK-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB1]], i32 [[TMP0]], ptr [[TMP2]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_outlined..6(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    call void @_Z3foov()
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_task_entry..7(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_10:%.*]], ptr [[TMP3]], i32 0, i32 0
// CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0
// CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
// CHECK-NEXT:    call void @.omp_outlined..6(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]]
// CHECK-NEXT:    ret i32 0
//
//
// CHECK-LABEL: @_Z27one_task_with_expr_graph_idi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_12:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store i32 [[N:%.*]], ptr [[N_ADDR]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i64 4)
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_11:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[N_ADDR]], align 4
// CHECK-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP3]], 3
// CHECK-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB1]], i32 [[TMP0]], i32 -534831243, ptr @__captured_stmt.8, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 [[ADD]], i32 0)
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @__captured_stmt.8(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_13:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..10)
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_14:%.*]], ptr [[TMP2]], i32 0, i32 0
// CHECK-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB1]], i32 [[TMP0]], ptr [[TMP2]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_outlined..9(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    call void @_Z3foov()
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_task_entry..10(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_14:%.*]], ptr [[TMP3]], i32 0, i32 0
// CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0
// CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
// CHECK-NEXT:    call void @.omp_outlined..9(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]]
// CHECK-NEXT:    ret i32 0
//
//
// CHECK-LABEL: @_Z34one_task_with_constant_graph_resetv(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_16:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i64 4)
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_15:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB1]], i32 [[TMP0]], i32 554669073, ptr @__captured_stmt.11, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 -1)
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @__captured_stmt.11(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_17:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..13)
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_18:%.*]], ptr [[TMP2]], i32 0, i32 0
// CHECK-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB1]], i32 [[TMP0]], ptr [[TMP2]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_outlined..12(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    call void @_Z3foov()
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_task_entry..13(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_18:%.*]], ptr [[TMP3]], i32 0, i32 0
// CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0
// CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
// CHECK-NEXT:    call void @.omp_outlined..12(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]]
// CHECK-NEXT:    ret i32 0
//
//
// CHECK-LABEL: @_Z30one_task_with_expr_graph_reseti(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_20:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store i32 [[N:%.*]], ptr [[N_ADDR]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i64 4)
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_19:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    [[TMP3:%.*]] = load i32, ptr [[N_ADDR]], align 4
// CHECK-NEXT:    [[CMP:%.*]] = icmp ne i32 [[TMP3]], 0
// CHECK-NEXT:    [[TMP4:%.*]] = sext i1 [[CMP]] to i32
// CHECK-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB1]], i32 [[TMP0]], i32 605001930, ptr @__captured_stmt.14, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 [[TMP4]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @__captured_stmt.14(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_21:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..16)
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_22:%.*]], ptr [[TMP2]], i32 0, i32 0
// CHECK-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB1]], i32 [[TMP0]], ptr [[TMP2]])
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_outlined..15(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    call void @_Z3foov()
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_task_entry..16(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_22:%.*]], ptr [[TMP3]], i32 0, i32 0
// CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0
// CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
// CHECK-NEXT:    call void @.omp_outlined..15(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]]
// CHECK-NEXT:    ret i32 0
//
//
// CHECK-LABEL: @_Z26loop_of_tasks_with_clausesi(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_24:%.*]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store i32 [[N:%.*]], ptr [[N_ADDR]], align 4
// CHECK-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i64 4)
// CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_23:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_24]], ptr [[AGG_CAPTURED]], i32 0, i32 0
// CHECK-NEXT:    store ptr [[N_ADDR]], ptr [[TMP3]], align 8
// CHECK-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB1]], i32 [[TMP0]], i32 588224311, ptr @__captured_stmt.17, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 1, i32 0)
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @__captured_stmt.17(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_25:%.*]], align 1
// CHECK-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1]])
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    store i32 0, ptr [[I]], align 4
// CHECK-NEXT:    br label [[FOR_COND:%.*]]
// CHECK:       for.cond:
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[I]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_24:%.*]], ptr [[TMP1]], i32 0, i32 0
// CHECK-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP3]], align 8
// CHECK-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4
// CHECK-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP2]], [[TMP5]]
// CHECK-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]]
// CHECK:       for.body:
// CHECK-NEXT:    [[TMP6:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..19)
// CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_26:%.*]], ptr [[TMP6]], i32 0, i32 0
// CHECK-NEXT:    [[TMP8:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB1]], i32 [[TMP0]], ptr [[TMP6]])
// CHECK-NEXT:    br label [[FOR_INC:%.*]]
// CHECK:       for.inc:
// CHECK-NEXT:    [[TMP9:%.*]] = load i32, ptr [[I]], align 4
// CHECK-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP9]], 1
// CHECK-NEXT:    store i32 [[INC]], ptr [[I]], align 4
// CHECK-NEXT:    br label [[FOR_COND]], !llvm.loop [[LOOP5:![0-9]+]]
// CHECK:       for.end:
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_outlined..18(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8
// CHECK-NEXT:    call void @_Z3foov()
// CHECK-NEXT:    ret void
//
//
// CHECK-LABEL: @.omp_task_entry..19(
// CHECK-NEXT:  entry:
// CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4
// CHECK-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8
// CHECK-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_26:%.*]], ptr [[TMP3]], i32 0, i32 0
// CHECK-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2
// CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0
// CHECK-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8
// CHECK-NEXT:    call void @.omp_outlined..18(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]]
// CHECK-NEXT:    ret i32 0
//
//
// CHECK-DEBUG-LABEL: @_Z15empty_taskgraphv(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB1:[0-9]+]]), !dbg [[DBG10:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB1]], i32 [[TMP0]], i64 4), !dbg [[DBG10]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG10]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB1]], i32 [[TMP0]], i32 1535057903, ptr @__captured_stmt, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 0), !dbg [[DBG10]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG11:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META20:![0-9]+]], metadata !DIExpression()), !dbg [[DBG21:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG22:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @_Z3foov(), !dbg [[DBG24:![0-9]+]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG26:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @_Z8one_taskv(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_1:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB3:[0-9]+]]), !dbg [[DBG28:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB3]], i32 [[TMP0]], i64 4), !dbg [[DBG28]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_0:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG28]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB3]], i32 [[TMP0]], i32 -417387910, ptr @__captured_stmt.1, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 0), !dbg [[DBG28]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG29:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt.1(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_2:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB5:[0-9]+]]), !dbg [[DBG37:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META41:![0-9]+]], metadata !DIExpression()), !dbg [[DBG42:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG43:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB5]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry.), !dbg [[DBG44:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], ptr [[TMP2]], i32 0, i32 0, !dbg [[DBG44]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB5]], i32 [[TMP0]], ptr [[TMP2]]), !dbg [[DBG44]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG45:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_outlined.(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTGLOBAL_TID__ADDR]], metadata [[META67:![0-9]+]], metadata !DIExpression()), !dbg [[DBG68:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPART_ID__ADDR]], metadata [[META69:![0-9]+]], metadata !DIExpression()), !dbg [[DBG68]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPRIVATES__ADDR]], metadata [[META70:![0-9]+]], metadata !DIExpression()), !dbg [[DBG68]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTCOPY_FN__ADDR]], metadata [[META71:![0-9]+]], metadata !DIExpression()), !dbg [[DBG68]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTTASK_T__ADDR]], metadata [[META72:![0-9]+]], metadata !DIExpression()), !dbg [[DBG68]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META73:![0-9]+]], metadata !DIExpression()), !dbg [[DBG68]]
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG74:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @_Z3foov(), !dbg [[DBG76:![0-9]+]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG78:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_task_entry.(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR]], metadata [[META81:![0-9]+]], metadata !DIExpression()), !dbg [[DBG82:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR1]], metadata [[META83:![0-9]+]], metadata !DIExpression()), !dbg [[DBG82]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4, !dbg [[DBG87:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG87]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG87]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2, !dbg [[DBG87]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0, !dbg [[DBG87]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG87]]
// CHECK-DEBUG-NEXT:    call void @.omp_outlined.(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1:[0-9]+]], !dbg [[DBG87]]
// CHECK-DEBUG-NEXT:    ret i32 0, !dbg [[DBG87]]
//
//
// CHECK-DEBUG-LABEL: @_Z13loop_of_tasksi(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_4:%.*]], align 8
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB7:[0-9]+]]), !dbg [[DBG91:![0-9]+]]
// CHECK-DEBUG-NEXT:    store i32 [[N:%.*]], ptr [[N_ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[N_ADDR]], metadata [[META92:![0-9]+]], metadata !DIExpression()), !dbg [[DBG93:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB7]], i32 [[TMP0]], i64 4), !dbg [[DBG91]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_3:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG91]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_4]], ptr [[AGG_CAPTURED]], i32 0, i32 0, !dbg [[DBG91]]
// CHECK-DEBUG-NEXT:    store ptr [[N_ADDR]], ptr [[TMP3]], align 8, !dbg [[DBG91]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB7]], i32 [[TMP0]], i32 -434165529, ptr @__captured_stmt.2, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 0), !dbg [[DBG91]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG94:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt.2(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_5:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB9:[0-9]+]]), !dbg [[DBG102:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META108:![0-9]+]], metadata !DIExpression()), !dbg [[DBG109:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG110:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[I]], metadata [[META111:![0-9]+]], metadata !DIExpression()), !dbg [[DBG112:![0-9]+]]
// CHECK-DEBUG-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG112]]
// CHECK-DEBUG-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG113:![0-9]+]]
// CHECK-DEBUG:       for.cond:
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG114:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_4:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG115:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG115]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4, !dbg [[DBG115]]
// CHECK-DEBUG-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP2]], [[TMP5]], !dbg [[DBG116:![0-9]+]]
// CHECK-DEBUG-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]], !dbg [[DBG117:![0-9]+]]
// CHECK-DEBUG:       for.body:
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB9]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..4), !dbg [[DBG118:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_6:%.*]], ptr [[TMP6]], i32 0, i32 0, !dbg [[DBG118]]
// CHECK-DEBUG-NEXT:    [[TMP8:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB9]], i32 [[TMP0]], ptr [[TMP6]]), !dbg [[DBG118]]
// CHECK-DEBUG-NEXT:    br label [[FOR_INC:%.*]], !dbg [[DBG119:![0-9]+]]
// CHECK-DEBUG:       for.inc:
// CHECK-DEBUG-NEXT:    [[TMP9:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG120:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP9]], 1, !dbg [[DBG120]]
// CHECK-DEBUG-NEXT:    store i32 [[INC]], ptr [[I]], align 4, !dbg [[DBG120]]
// CHECK-DEBUG-NEXT:    br label [[FOR_COND]], !dbg [[DBG121:![0-9]+]], !llvm.loop [[LOOP122:![0-9]+]]
// CHECK-DEBUG:       for.end:
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG125:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_outlined..3(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTGLOBAL_TID__ADDR]], metadata [[META133:![0-9]+]], metadata !DIExpression()), !dbg [[DBG134:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPART_ID__ADDR]], metadata [[META135:![0-9]+]], metadata !DIExpression()), !dbg [[DBG134]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPRIVATES__ADDR]], metadata [[META136:![0-9]+]], metadata !DIExpression()), !dbg [[DBG134]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTCOPY_FN__ADDR]], metadata [[META137:![0-9]+]], metadata !DIExpression()), !dbg [[DBG134]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTTASK_T__ADDR]], metadata [[META138:![0-9]+]], metadata !DIExpression()), !dbg [[DBG134]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META139:![0-9]+]], metadata !DIExpression()), !dbg [[DBG134]]
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG140:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @_Z3foov(), !dbg [[DBG142:![0-9]+]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG144:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_task_entry..4(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR]], metadata [[META146:![0-9]+]], metadata !DIExpression()), !dbg [[DBG147:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR1]], metadata [[META148:![0-9]+]], metadata !DIExpression()), !dbg [[DBG147]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4, !dbg [[DBG149:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG149]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_6:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG149]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2, !dbg [[DBG149]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0, !dbg [[DBG149]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG149]]
// CHECK-DEBUG-NEXT:    call void @.omp_outlined..3(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]], !dbg [[DBG149]]
// CHECK-DEBUG-NEXT:    ret i32 0, !dbg [[DBG149]]
//
//
// CHECK-DEBUG-LABEL: @_Z31one_task_with_constant_graph_idv(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_8:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB11:[0-9]+]]), !dbg [[DBG151:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB11]], i32 [[TMP0]], i64 4), !dbg [[DBG151]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_7:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG151]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB11]], i32 [[TMP0]], i32 -484498386, ptr @__captured_stmt.5, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 1, i32 0), !dbg [[DBG151]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG152:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt.5(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_9:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB13:[0-9]+]]), !dbg [[DBG160:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META164:![0-9]+]], metadata !DIExpression()), !dbg [[DBG165:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG166:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB13]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..7), !dbg [[DBG167:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_10:%.*]], ptr [[TMP2]], i32 0, i32 0, !dbg [[DBG167]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB13]], i32 [[TMP0]], ptr [[TMP2]]), !dbg [[DBG167]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG168:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_outlined..6(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTGLOBAL_TID__ADDR]], metadata [[META176:![0-9]+]], metadata !DIExpression()), !dbg [[DBG177:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPART_ID__ADDR]], metadata [[META178:![0-9]+]], metadata !DIExpression()), !dbg [[DBG177]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPRIVATES__ADDR]], metadata [[META179:![0-9]+]], metadata !DIExpression()), !dbg [[DBG177]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTCOPY_FN__ADDR]], metadata [[META180:![0-9]+]], metadata !DIExpression()), !dbg [[DBG177]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTTASK_T__ADDR]], metadata [[META181:![0-9]+]], metadata !DIExpression()), !dbg [[DBG177]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META182:![0-9]+]], metadata !DIExpression()), !dbg [[DBG177]]
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG183:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @_Z3foov(), !dbg [[DBG185:![0-9]+]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG187:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_task_entry..7(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR]], metadata [[META189:![0-9]+]], metadata !DIExpression()), !dbg [[DBG190:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR1]], metadata [[META191:![0-9]+]], metadata !DIExpression()), !dbg [[DBG190]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4, !dbg [[DBG192:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG192]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_10:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG192]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2, !dbg [[DBG192]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0, !dbg [[DBG192]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG192]]
// CHECK-DEBUG-NEXT:    call void @.omp_outlined..6(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]], !dbg [[DBG192]]
// CHECK-DEBUG-NEXT:    ret i32 0, !dbg [[DBG192]]
//
//
// CHECK-DEBUG-LABEL: @_Z27one_task_with_expr_graph_idi(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_12:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB15:[0-9]+]]), !dbg [[DBG194:![0-9]+]]
// CHECK-DEBUG-NEXT:    store i32 [[N:%.*]], ptr [[N_ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[N_ADDR]], metadata [[META195:![0-9]+]], metadata !DIExpression()), !dbg [[DBG196:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB15]], i32 [[TMP0]], i64 4), !dbg [[DBG194]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_11:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG194]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load i32, ptr [[N_ADDR]], align 4, !dbg [[DBG197:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[ADD:%.*]] = add nsw i32 [[TMP3]], 3, !dbg [[DBG198:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB15]], i32 [[TMP0]], i32 -534831243, ptr @__captured_stmt.8, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 [[ADD]], i32 0), !dbg [[DBG194]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG199:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt.8(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_13:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB17:[0-9]+]]), !dbg [[DBG207:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META211:![0-9]+]], metadata !DIExpression()), !dbg [[DBG212:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG213:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB17]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..10), !dbg [[DBG214:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_14:%.*]], ptr [[TMP2]], i32 0, i32 0, !dbg [[DBG214]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB17]], i32 [[TMP0]], ptr [[TMP2]]), !dbg [[DBG214]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG215:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_outlined..9(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTGLOBAL_TID__ADDR]], metadata [[META223:![0-9]+]], metadata !DIExpression()), !dbg [[DBG224:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPART_ID__ADDR]], metadata [[META225:![0-9]+]], metadata !DIExpression()), !dbg [[DBG224]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPRIVATES__ADDR]], metadata [[META226:![0-9]+]], metadata !DIExpression()), !dbg [[DBG224]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTCOPY_FN__ADDR]], metadata [[META227:![0-9]+]], metadata !DIExpression()), !dbg [[DBG224]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTTASK_T__ADDR]], metadata [[META228:![0-9]+]], metadata !DIExpression()), !dbg [[DBG224]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META229:![0-9]+]], metadata !DIExpression()), !dbg [[DBG224]]
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG230:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @_Z3foov(), !dbg [[DBG232:![0-9]+]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG234:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_task_entry..10(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR]], metadata [[META236:![0-9]+]], metadata !DIExpression()), !dbg [[DBG237:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR1]], metadata [[META238:![0-9]+]], metadata !DIExpression()), !dbg [[DBG237]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4, !dbg [[DBG239:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG239]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_14:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG239]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2, !dbg [[DBG239]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0, !dbg [[DBG239]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG239]]
// CHECK-DEBUG-NEXT:    call void @.omp_outlined..9(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]], !dbg [[DBG239]]
// CHECK-DEBUG-NEXT:    ret i32 0, !dbg [[DBG239]]
//
//
// CHECK-DEBUG-LABEL: @_Z34one_task_with_constant_graph_resetv(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_16:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB19:[0-9]+]]), !dbg [[DBG241:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB19]], i32 [[TMP0]], i64 4), !dbg [[DBG241]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_15:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG241]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB19]], i32 [[TMP0]], i32 554669073, ptr @__captured_stmt.11, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 -1), !dbg [[DBG241]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG242:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt.11(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_17:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB21:[0-9]+]]), !dbg [[DBG250:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META254:![0-9]+]], metadata !DIExpression()), !dbg [[DBG255:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG256:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB21]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..13), !dbg [[DBG257:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_18:%.*]], ptr [[TMP2]], i32 0, i32 0, !dbg [[DBG257]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB21]], i32 [[TMP0]], ptr [[TMP2]]), !dbg [[DBG257]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG258:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_outlined..12(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTGLOBAL_TID__ADDR]], metadata [[META266:![0-9]+]], metadata !DIExpression()), !dbg [[DBG267:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPART_ID__ADDR]], metadata [[META268:![0-9]+]], metadata !DIExpression()), !dbg [[DBG267]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPRIVATES__ADDR]], metadata [[META269:![0-9]+]], metadata !DIExpression()), !dbg [[DBG267]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTCOPY_FN__ADDR]], metadata [[META270:![0-9]+]], metadata !DIExpression()), !dbg [[DBG267]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTTASK_T__ADDR]], metadata [[META271:![0-9]+]], metadata !DIExpression()), !dbg [[DBG267]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META272:![0-9]+]], metadata !DIExpression()), !dbg [[DBG267]]
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG273:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @_Z3foov(), !dbg [[DBG275:![0-9]+]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG277:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_task_entry..13(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR]], metadata [[META279:![0-9]+]], metadata !DIExpression()), !dbg [[DBG280:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR1]], metadata [[META281:![0-9]+]], metadata !DIExpression()), !dbg [[DBG280]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4, !dbg [[DBG282:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG282]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_18:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG282]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2, !dbg [[DBG282]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0, !dbg [[DBG282]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG282]]
// CHECK-DEBUG-NEXT:    call void @.omp_outlined..12(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]], !dbg [[DBG282]]
// CHECK-DEBUG-NEXT:    ret i32 0, !dbg [[DBG282]]
//
//
// CHECK-DEBUG-LABEL: @_Z30one_task_with_expr_graph_reseti(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_20:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB23:[0-9]+]]), !dbg [[DBG284:![0-9]+]]
// CHECK-DEBUG-NEXT:    store i32 [[N:%.*]], ptr [[N_ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[N_ADDR]], metadata [[META285:![0-9]+]], metadata !DIExpression()), !dbg [[DBG286:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB23]], i32 [[TMP0]], i64 4), !dbg [[DBG284]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_19:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG284]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load i32, ptr [[N_ADDR]], align 4, !dbg [[DBG287:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[CMP:%.*]] = icmp ne i32 [[TMP3]], 0, !dbg [[DBG288:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = sext i1 [[CMP]] to i32, !dbg [[DBG284]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB23]], i32 [[TMP0]], i32 605001930, ptr @__captured_stmt.14, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 0, i32 [[TMP4]]), !dbg [[DBG284]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG289:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt.14(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_21:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB25:[0-9]+]]), !dbg [[DBG297:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META301:![0-9]+]], metadata !DIExpression()), !dbg [[DBG302:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG303:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB25]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..16), !dbg [[DBG304:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_22:%.*]], ptr [[TMP2]], i32 0, i32 0, !dbg [[DBG304]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB25]], i32 [[TMP0]], ptr [[TMP2]]), !dbg [[DBG304]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG305:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_outlined..15(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTGLOBAL_TID__ADDR]], metadata [[META313:![0-9]+]], metadata !DIExpression()), !dbg [[DBG314:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPART_ID__ADDR]], metadata [[META315:![0-9]+]], metadata !DIExpression()), !dbg [[DBG314]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPRIVATES__ADDR]], metadata [[META316:![0-9]+]], metadata !DIExpression()), !dbg [[DBG314]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTCOPY_FN__ADDR]], metadata [[META317:![0-9]+]], metadata !DIExpression()), !dbg [[DBG314]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTTASK_T__ADDR]], metadata [[META318:![0-9]+]], metadata !DIExpression()), !dbg [[DBG314]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META319:![0-9]+]], metadata !DIExpression()), !dbg [[DBG314]]
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG320:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @_Z3foov(), !dbg [[DBG322:![0-9]+]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG324:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_task_entry..16(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR]], metadata [[META326:![0-9]+]], metadata !DIExpression()), !dbg [[DBG327:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR1]], metadata [[META328:![0-9]+]], metadata !DIExpression()), !dbg [[DBG327]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4, !dbg [[DBG329:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG329]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_22:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG329]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2, !dbg [[DBG329]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0, !dbg [[DBG329]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG329]]
// CHECK-DEBUG-NEXT:    call void @.omp_outlined..15(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]], !dbg [[DBG329]]
// CHECK-DEBUG-NEXT:    ret i32 0, !dbg [[DBG329]]
//
//
// CHECK-DEBUG-LABEL: @_Z26loop_of_tasks_with_clausesi(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[N_ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_24:%.*]], align 8
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB27:[0-9]+]]), !dbg [[DBG331:![0-9]+]]
// CHECK-DEBUG-NEXT:    store i32 [[N:%.*]], ptr [[N_ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[N_ADDR]], metadata [[META332:![0-9]+]], metadata !DIExpression()), !dbg [[DBG333:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = call ptr @__kmpc_omp_taskgraph_alloc(ptr @[[GLOB27]], i32 [[TMP0]], i64 4), !dbg [[DBG331]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASKGRAPH_T_WITH_RECAPTURE_23:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG331]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_24]], ptr [[AGG_CAPTURED]], i32 0, i32 0, !dbg [[DBG331]]
// CHECK-DEBUG-NEXT:    store ptr [[N_ADDR]], ptr [[TMP3]], align 8, !dbg [[DBG331]]
// CHECK-DEBUG-NEXT:    call void @__kmpc_taskgraph(ptr @[[GLOB27]], i32 [[TMP0]], i32 588224311, ptr @__captured_stmt.17, ptr [[AGG_CAPTURED]], i32 0, i32 4, i32 1, i32 0), !dbg [[DBG331]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG334:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @__captured_stmt.17(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[I:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[AGG_CAPTURED:%.*]] = alloca [[STRUCT_ANON_25:%.*]], align 1
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = call i32 @__kmpc_global_thread_num(ptr @[[GLOB29:[0-9]+]]), !dbg [[DBG342:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META348:![0-9]+]], metadata !DIExpression()), !dbg [[DBG349:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP1:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG350:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[I]], metadata [[META351:![0-9]+]], metadata !DIExpression()), !dbg [[DBG352:![0-9]+]]
// CHECK-DEBUG-NEXT:    store i32 0, ptr [[I]], align 4, !dbg [[DBG352]]
// CHECK-DEBUG-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG353:![0-9]+]]
// CHECK-DEBUG:       for.cond:
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG354:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT_ANON_24:%.*]], ptr [[TMP1]], i32 0, i32 0, !dbg [[DBG355:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = load ptr, ptr [[TMP3]], align 8, !dbg [[DBG355]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = load i32, ptr [[TMP4]], align 4, !dbg [[DBG355]]
// CHECK-DEBUG-NEXT:    [[CMP:%.*]] = icmp slt i32 [[TMP2]], [[TMP5]], !dbg [[DBG356:![0-9]+]]
// CHECK-DEBUG-NEXT:    br i1 [[CMP]], label [[FOR_BODY:%.*]], label [[FOR_END:%.*]], !dbg [[DBG357:![0-9]+]]
// CHECK-DEBUG:       for.body:
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = call ptr @__kmpc_omp_task_alloc(ptr @[[GLOB29]], i32 [[TMP0]], i32 1, i64 40, i64 1, ptr @.omp_task_entry..19), !dbg [[DBG358:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_26:%.*]], ptr [[TMP6]], i32 0, i32 0, !dbg [[DBG358]]
// CHECK-DEBUG-NEXT:    [[TMP8:%.*]] = call i32 @__kmpc_omp_task(ptr @[[GLOB29]], i32 [[TMP0]], ptr [[TMP6]]), !dbg [[DBG358]]
// CHECK-DEBUG-NEXT:    br label [[FOR_INC:%.*]], !dbg [[DBG359:![0-9]+]]
// CHECK-DEBUG:       for.inc:
// CHECK-DEBUG-NEXT:    [[TMP9:%.*]] = load i32, ptr [[I]], align 4, !dbg [[DBG360:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[INC:%.*]] = add nsw i32 [[TMP9]], 1, !dbg [[DBG360]]
// CHECK-DEBUG-NEXT:    store i32 [[INC]], ptr [[I]], align 4, !dbg [[DBG360]]
// CHECK-DEBUG-NEXT:    br label [[FOR_COND]], !dbg [[DBG361:![0-9]+]], !llvm.loop [[LOOP362:![0-9]+]]
// CHECK-DEBUG:       for.end:
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG364:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_outlined..18(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTGLOBAL_TID__ADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTPART_ID__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTPRIVATES__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTCOPY_FN__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[DOTTASK_T__ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    [[__CONTEXT_ADDR:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[DOTGLOBAL_TID_:%.*]], ptr [[DOTGLOBAL_TID__ADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTGLOBAL_TID__ADDR]], metadata [[META372:![0-9]+]], metadata !DIExpression()), !dbg [[DBG373:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPART_ID_:%.*]], ptr [[DOTPART_ID__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPART_ID__ADDR]], metadata [[META374:![0-9]+]], metadata !DIExpression()), !dbg [[DBG373]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTPRIVATES_:%.*]], ptr [[DOTPRIVATES__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTPRIVATES__ADDR]], metadata [[META375:![0-9]+]], metadata !DIExpression()), !dbg [[DBG373]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTCOPY_FN_:%.*]], ptr [[DOTCOPY_FN__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTCOPY_FN__ADDR]], metadata [[META376:![0-9]+]], metadata !DIExpression()), !dbg [[DBG373]]
// CHECK-DEBUG-NEXT:    store ptr [[DOTTASK_T_:%.*]], ptr [[DOTTASK_T__ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTTASK_T__ADDR]], metadata [[META377:![0-9]+]], metadata !DIExpression()), !dbg [[DBG373]]
// CHECK-DEBUG-NEXT:    store ptr [[__CONTEXT:%.*]], ptr [[__CONTEXT_ADDR]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[__CONTEXT_ADDR]], metadata [[META378:![0-9]+]], metadata !DIExpression()), !dbg [[DBG373]]
// CHECK-DEBUG-NEXT:    [[TMP0:%.*]] = load ptr, ptr [[__CONTEXT_ADDR]], align 8, !dbg [[DBG379:![0-9]+]]
// CHECK-DEBUG-NEXT:    call void @_Z3foov(), !dbg [[DBG381:![0-9]+]]
// CHECK-DEBUG-NEXT:    ret void, !dbg [[DBG383:![0-9]+]]
//
//
// CHECK-DEBUG-LABEL: @.omp_task_entry..19(
// CHECK-DEBUG-NEXT:  entry:
// CHECK-DEBUG-NEXT:    [[DOTADDR:%.*]] = alloca i32, align 4
// CHECK-DEBUG-NEXT:    [[DOTADDR1:%.*]] = alloca ptr, align 8
// CHECK-DEBUG-NEXT:    store i32 [[TMP0:%.*]], ptr [[DOTADDR]], align 4
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR]], metadata [[META385:![0-9]+]], metadata !DIExpression()), !dbg [[DBG386:![0-9]+]]
// CHECK-DEBUG-NEXT:    store ptr [[TMP1:%.*]], ptr [[DOTADDR1]], align 8
// CHECK-DEBUG-NEXT:    call void @llvm.dbg.declare(metadata ptr [[DOTADDR1]], metadata [[META387:![0-9]+]], metadata !DIExpression()), !dbg [[DBG386]]
// CHECK-DEBUG-NEXT:    [[TMP2:%.*]] = load i32, ptr [[DOTADDR]], align 4, !dbg [[DBG388:![0-9]+]]
// CHECK-DEBUG-NEXT:    [[TMP3:%.*]] = load ptr, ptr [[DOTADDR1]], align 8, !dbg [[DBG388]]
// CHECK-DEBUG-NEXT:    [[TMP4:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T_WITH_PRIVATES_26:%.*]], ptr [[TMP3]], i32 0, i32 0, !dbg [[DBG388]]
// CHECK-DEBUG-NEXT:    [[TMP5:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T:%.*]], ptr [[TMP4]], i32 0, i32 2, !dbg [[DBG388]]
// CHECK-DEBUG-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT_KMP_TASK_T]], ptr [[TMP4]], i32 0, i32 0, !dbg [[DBG388]]
// CHECK-DEBUG-NEXT:    [[TMP7:%.*]] = load ptr, ptr [[TMP6]], align 8, !dbg [[DBG388]]
// CHECK-DEBUG-NEXT:    call void @.omp_outlined..18(i32 [[TMP2]], ptr [[TMP5]], ptr null, ptr null, ptr [[TMP3]], ptr [[TMP7]]) #[[ATTR1]], !dbg [[DBG388]]
// CHECK-DEBUG-NEXT:    ret i32 0, !dbg [[DBG388]]
//

; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | opt -O3 -S | FileCheck %s
; ModuleID = 'collapse_niters.c'
source_filename = "collapse_niters.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Thanks to -O3 test the number of iterations passed to the runtime

; int main() {
;     #pragma oss taskloop collapse(2)
;     for (int i = 10; i > 0; --i) {
;         for (int j = 10; j > i; --j) {
;         }
;     }
;     #pragma oss taskloop collapse(2)
;     for (int i = 10; i > 0; --i) {
;         for (int j = i; j > 0; --j) {
;         }
;     }
;     #pragma oss taskloop collapse(2)
;     for (int i = 10; i > 0; --i) {
;         for (int j = 0; j < i; ++j) {
;         }
;     }
;     #pragma oss taskloop collapse(2)
;     for (int i = 10; i > 0; --i) {
;         for (int j = i; j < 10; ++j) {
;         }
;     }
;     #pragma oss taskwait
; }

; Function Attrs: noinline nounwind
define dso_local i32 @main() #0 !dbg !6 {
; CHECK-LABEL: @main(
; CHECK:    call void @nanos6_create_loop(%nanos6_task_info_t* nonnull @task_info_var_main0, %nanos6_task_invocation_info_t* nonnull @task_invocation_info_main0, i64 {{.*}}, i8** nonnull {{.*}}, i8** nonnull {{.*}}, i64 4, i64 0, i64 0, i64 90, i64 0, i64 0)
; CHECK:    call void @nanos6_create_loop(%nanos6_task_info_t* nonnull @task_info_var_main1, %nanos6_task_invocation_info_t* nonnull @task_invocation_info_main1, i64 {{.*}}, i8** nonnull {{.*}}, i8** nonnull {{.*}}, i64 4, i64 0, i64 0, i64 100, i64 0, i64 0)
; CHECK:    call void @nanos6_create_loop(%nanos6_task_info_t* nonnull @task_info_var_main2, %nanos6_task_invocation_info_t* nonnull @task_invocation_info_main2, i64 {{.*}}, i8** nonnull {{.*}}, i8** nonnull {{.*}}, i64 4, i64 0, i64 0, i64 100, i64 0, i64 0)
; CHECK:    call void @nanos6_create_loop(%nanos6_task_info_t* nonnull @task_info_var_main3, %nanos6_task_invocation_info_t* nonnull @task_invocation_info_main3, i64 {{.*}}, i8** nonnull {{.*}}, i8** nonnull {{.*}}, i64 4, i64 0, i64 0, i64 90, i64 0, i64 0)
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  %i1 = alloca i32, align 4
  %j2 = alloca i32, align 4
  %i3 = alloca i32, align 4
  %j4 = alloca i32, align 4
  %i5 = alloca i32, align 4
  %j6 = alloca i32, align 4
  store i32 10, i32* %i, align 4, !dbg !9
  store i32 10, i32* %j, align 4, !dbg !10
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.PRIVATE"(i32* %j), "QUAL.OSS.LOOP.IND.VAR"(i32* %i, i32* %j), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 ()* @compute_lb, i32 ()* @compute_lb.1), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 ()* @compute_ub, i32 (i32*)* @compute_ub.2, i32* %i), "QUAL.OSS.LOOP.STEP"(i32 ()* @compute_step, i32 ()* @compute_step.3), "QUAL.OSS.LOOP.TYPE"(i64 2, i64 1, i64 1, i64 1, i64 1, i64 2, i64 1, i64 1, i64 1, i64 1) ], !dbg !11
  call void @llvm.directive.region.exit(token %0), !dbg !12
  store i32 10, i32* %i1, align 4, !dbg !13
  %1 = load i32, i32* %i1, align 4, !dbg !14
  store i32 %1, i32* %j2, align 4, !dbg !15
  %2 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(i32* %i1), "QUAL.OSS.PRIVATE"(i32* %j2), "QUAL.OSS.LOOP.IND.VAR"(i32* %i1, i32* %j2), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 ()* @compute_lb.4, i32 (i32*)* @compute_lb.7, i32* %i1), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 ()* @compute_ub.5, i32 ()* @compute_ub.8), "QUAL.OSS.LOOP.STEP"(i32 ()* @compute_step.6, i32 ()* @compute_step.9), "QUAL.OSS.LOOP.TYPE"(i64 2, i64 1, i64 1, i64 1, i64 1, i64 2, i64 1, i64 1, i64 1, i64 1) ], !dbg !16
  call void @llvm.directive.region.exit(token %2), !dbg !17
  store i32 10, i32* %i3, align 4, !dbg !18
  store i32 0, i32* %j4, align 4, !dbg !19
  %3 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(i32* %i3), "QUAL.OSS.PRIVATE"(i32* %j4), "QUAL.OSS.LOOP.IND.VAR"(i32* %i3, i32* %j4), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 ()* @compute_lb.10, i32 ()* @compute_lb.13), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 ()* @compute_ub.11, i32 (i32*)* @compute_ub.14, i32* %i3), "QUAL.OSS.LOOP.STEP"(i32 ()* @compute_step.12, i32 ()* @compute_step.15), "QUAL.OSS.LOOP.TYPE"(i64 2, i64 1, i64 1, i64 1, i64 1, i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !20
  call void @llvm.directive.region.exit(token %3), !dbg !21
  store i32 10, i32* %i5, align 4, !dbg !22
  %4 = load i32, i32* %i5, align 4, !dbg !23
  store i32 %4, i32* %j6, align 4, !dbg !24
  %5 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(i32* %i5), "QUAL.OSS.PRIVATE"(i32* %j6), "QUAL.OSS.LOOP.IND.VAR"(i32* %i5, i32* %j6), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 ()* @compute_lb.16, i32 (i32*)* @compute_lb.19, i32* %i5), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 ()* @compute_ub.17, i32 ()* @compute_ub.20), "QUAL.OSS.LOOP.STEP"(i32 ()* @compute_step.18, i32 ()* @compute_step.21), "QUAL.OSS.LOOP.TYPE"(i64 2, i64 1, i64 1, i64 1, i64 1, i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !25
  call void @llvm.directive.region.exit(token %5), !dbg !26
  %6 = call i1 @llvm.directive.marker() [ "DIR.OSS"([9 x i8] c"TASKWAIT\00") ], !dbg !27
  ret i32 0, !dbg !28
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb() #2 !dbg !29 {
entry:
  ret i32 10, !dbg !30
}

define internal i32 @compute_ub() #2 !dbg !32 {
entry:
  ret i32 0, !dbg !33
}

define internal i32 @compute_step() #2 !dbg !35 {
entry:
  ret i32 -1, !dbg !36
}

define internal i32 @compute_lb.1() #2 !dbg !38 {
entry:
  ret i32 10, !dbg !39
}

define internal i32 @compute_ub.2(i32* %i) #2 !dbg !41 {
entry:
  %i.addr = alloca i32*, align 8
  store i32* %i, i32** %i.addr, align 8
  %0 = load i32, i32* %i, align 4, !dbg !42
  ret i32 %0, !dbg !42
}

define internal i32 @compute_step.3() #2 !dbg !44 {
entry:
  ret i32 -1, !dbg !45
}

define internal i32 @compute_lb.4() #2 !dbg !47 {
entry:
  ret i32 10, !dbg !48
}

define internal i32 @compute_ub.5() #2 !dbg !50 {
entry:
  ret i32 0, !dbg !51
}

define internal i32 @compute_step.6() #2 !dbg !53 {
entry:
  ret i32 -1, !dbg !54
}

define internal i32 @compute_lb.7(i32* %i) #2 !dbg !56 {
entry:
  %i.addr = alloca i32*, align 8
  store i32* %i, i32** %i.addr, align 8
  %0 = load i32, i32* %i, align 4, !dbg !57
  ret i32 %0, !dbg !57
}

define internal i32 @compute_ub.8() #2 !dbg !59 {
entry:
  ret i32 0, !dbg !60
}

define internal i32 @compute_step.9() #2 !dbg !62 {
entry:
  ret i32 -1, !dbg !63
}

define internal i32 @compute_lb.10() #2 !dbg !65 {
entry:
  ret i32 10, !dbg !66
}

define internal i32 @compute_ub.11() #2 !dbg !68 {
entry:
  ret i32 0, !dbg !69
}

define internal i32 @compute_step.12() #2 !dbg !71 {
entry:
  ret i32 -1, !dbg !72
}

define internal i32 @compute_lb.13() #2 !dbg !74 {
entry:
  ret i32 0, !dbg !75
}

define internal i32 @compute_ub.14(i32* %i) #2 !dbg !77 {
entry:
  %i.addr = alloca i32*, align 8
  store i32* %i, i32** %i.addr, align 8
  %0 = load i32, i32* %i, align 4, !dbg !78
  ret i32 %0, !dbg !78
}

define internal i32 @compute_step.15() #2 !dbg !80 {
entry:
  ret i32 1, !dbg !81
}

define internal i32 @compute_lb.16() #2 !dbg !83 {
entry:
  ret i32 10, !dbg !84
}

define internal i32 @compute_ub.17() #2 !dbg !86 {
entry:
  ret i32 0, !dbg !87
}

define internal i32 @compute_step.18() #2 !dbg !89 {
entry:
  ret i32 -1, !dbg !90
}

define internal i32 @compute_lb.19(i32* %i) #2 !dbg !92 {
entry:
  %i.addr = alloca i32*, align 8
  store i32* %i, i32** %i.addr, align 8
  %0 = load i32, i32* %i, align 4, !dbg !93
  ret i32 %0, !dbg !93
}

define internal i32 @compute_ub.20() #2 !dbg !95 {
entry:
  ret i32 10, !dbg !96
}

define internal i32 @compute_step.21() #2 !dbg !98 {
entry:
  ret i32 1, !dbg !99
}

; Function Attrs: nounwind
declare i1 @llvm.directive.marker() #1

attributes #0 = { noinline nounwind "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{!""}
!6 = distinct !DISubprogram(name: "main", scope: !7, file: !7, line: 1, type: !8, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!7 = !DIFile(filename: "collapse_niters.c", directory: "")
!8 = !DISubroutineType(types: !2)
!9 = !DILocation(line: 3, column: 14, scope: !6)
!10 = !DILocation(line: 4, column: 18, scope: !6)
!11 = !DILocation(line: 4, column: 14, scope: !6)
!12 = !DILocation(line: 5, column: 9, scope: !6)
!13 = !DILocation(line: 8, column: 14, scope: !6)
!14 = !DILocation(line: 9, column: 22, scope: !6)
!15 = !DILocation(line: 9, column: 18, scope: !6)
!16 = !DILocation(line: 9, column: 14, scope: !6)
!17 = !DILocation(line: 10, column: 9, scope: !6)
!18 = !DILocation(line: 13, column: 14, scope: !6)
!19 = !DILocation(line: 14, column: 18, scope: !6)
!20 = !DILocation(line: 14, column: 14, scope: !6)
!21 = !DILocation(line: 15, column: 9, scope: !6)
!22 = !DILocation(line: 18, column: 14, scope: !6)
!23 = !DILocation(line: 19, column: 22, scope: !6)
!24 = !DILocation(line: 19, column: 18, scope: !6)
!25 = !DILocation(line: 19, column: 14, scope: !6)
!26 = !DILocation(line: 20, column: 9, scope: !6)
!27 = !DILocation(line: 22, column: 13, scope: !6)
!28 = !DILocation(line: 23, column: 1, scope: !6)
!29 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!30 = !DILocation(line: 3, column: 18, scope: !31)
!31 = !DILexicalBlockFile(scope: !29, file: !7, discriminator: 0)
!32 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!33 = !DILocation(line: 3, column: 26, scope: !34)
!34 = !DILexicalBlockFile(scope: !32, file: !7, discriminator: 0)
!35 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!36 = !DILocation(line: 3, column: 29, scope: !37)
!37 = !DILexicalBlockFile(scope: !35, file: !7, discriminator: 0)
!38 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!39 = !DILocation(line: 4, column: 22, scope: !40)
!40 = !DILexicalBlockFile(scope: !38, file: !7, discriminator: 0)
!41 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!42 = !DILocation(line: 4, column: 30, scope: !43)
!43 = !DILexicalBlockFile(scope: !41, file: !7, discriminator: 0)
!44 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!45 = !DILocation(line: 4, column: 33, scope: !46)
!46 = !DILexicalBlockFile(scope: !44, file: !7, discriminator: 0)
!47 = distinct !DISubprogram(linkageName: "compute_lb.4", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!48 = !DILocation(line: 8, column: 18, scope: !49)
!49 = !DILexicalBlockFile(scope: !47, file: !7, discriminator: 0)
!50 = distinct !DISubprogram(linkageName: "compute_ub.5", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!51 = !DILocation(line: 8, column: 26, scope: !52)
!52 = !DILexicalBlockFile(scope: !50, file: !7, discriminator: 0)
!53 = distinct !DISubprogram(linkageName: "compute_step.6", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!54 = !DILocation(line: 8, column: 29, scope: !55)
!55 = !DILexicalBlockFile(scope: !53, file: !7, discriminator: 0)
!56 = distinct !DISubprogram(linkageName: "compute_lb.7", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!57 = !DILocation(line: 9, column: 22, scope: !58)
!58 = !DILexicalBlockFile(scope: !56, file: !7, discriminator: 0)
!59 = distinct !DISubprogram(linkageName: "compute_ub.8", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!60 = !DILocation(line: 9, column: 29, scope: !61)
!61 = !DILexicalBlockFile(scope: !59, file: !7, discriminator: 0)
!62 = distinct !DISubprogram(linkageName: "compute_step.9", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!63 = !DILocation(line: 9, column: 32, scope: !64)
!64 = !DILexicalBlockFile(scope: !62, file: !7, discriminator: 0)
!65 = distinct !DISubprogram(linkageName: "compute_lb.10", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!66 = !DILocation(line: 13, column: 18, scope: !67)
!67 = !DILexicalBlockFile(scope: !65, file: !7, discriminator: 0)
!68 = distinct !DISubprogram(linkageName: "compute_ub.11", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!69 = !DILocation(line: 13, column: 26, scope: !70)
!70 = !DILexicalBlockFile(scope: !68, file: !7, discriminator: 0)
!71 = distinct !DISubprogram(linkageName: "compute_step.12", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!72 = !DILocation(line: 13, column: 29, scope: !73)
!73 = !DILexicalBlockFile(scope: !71, file: !7, discriminator: 0)
!74 = distinct !DISubprogram(linkageName: "compute_lb.13", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!75 = !DILocation(line: 14, column: 22, scope: !76)
!76 = !DILexicalBlockFile(scope: !74, file: !7, discriminator: 0)
!77 = distinct !DISubprogram(linkageName: "compute_ub.14", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!78 = !DILocation(line: 14, column: 29, scope: !79)
!79 = !DILexicalBlockFile(scope: !77, file: !7, discriminator: 0)
!80 = distinct !DISubprogram(linkageName: "compute_step.15", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!81 = !DILocation(line: 14, column: 32, scope: !82)
!82 = !DILexicalBlockFile(scope: !80, file: !7, discriminator: 0)
!83 = distinct !DISubprogram(linkageName: "compute_lb.16", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!84 = !DILocation(line: 18, column: 18, scope: !85)
!85 = !DILexicalBlockFile(scope: !83, file: !7, discriminator: 0)
!86 = distinct !DISubprogram(linkageName: "compute_ub.17", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!87 = !DILocation(line: 18, column: 26, scope: !88)
!88 = !DILexicalBlockFile(scope: !86, file: !7, discriminator: 0)
!89 = distinct !DISubprogram(linkageName: "compute_step.18", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!90 = !DILocation(line: 18, column: 29, scope: !91)
!91 = !DILexicalBlockFile(scope: !89, file: !7, discriminator: 0)
!92 = distinct !DISubprogram(linkageName: "compute_lb.19", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!93 = !DILocation(line: 19, column: 22, scope: !94)
!94 = !DILexicalBlockFile(scope: !92, file: !7, discriminator: 0)
!95 = distinct !DISubprogram(linkageName: "compute_ub.20", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!96 = !DILocation(line: 19, column: 29, scope: !97)
!97 = !DILexicalBlockFile(scope: !95, file: !7, discriminator: 0)
!98 = distinct !DISubprogram(linkageName: "compute_step.21", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!99 = !DILocation(line: 19, column: 33, scope: !100)
!100 = !DILexicalBlockFile(scope: !98, file: !7, discriminator: 0)

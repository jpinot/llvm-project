; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 'multideps_dep_counter.ll'
source_filename = "multideps_dep_counter.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; int main() {
;     int array[10];
;     #pragma oss task in( array[0], { array[1], i = 0 : 9, j = i : 9 } )
;     {}
; }
; NOTE: result is 1 + 55

%struct._depend_unpack_t = type { i32*, i64, i64, i64 }
%struct._depend_unpack_t.0 = type { i32, i32, i32, i32, i32, i32, i32, i32 }
%struct._depend_unpack_t.1 = type { i32*, i64, i64, i64 }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 !dbg !8 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[ARRAY:%.*]] = alloca [10 x i32], align 16
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, i32* [[I]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[J]], align 4, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_main0*, align 8, !dbg [[DBG13:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[I_REMAP:%.*]] = alloca i32, align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[J_REMAP:%.*]] = alloca i32, align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG13]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_main0** [[TMP1]] to i8**, !dbg [[DBG13]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP5:%.*]] = add i64 [[TMP4]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    store i64 [[TMP5]], i64* [[NUM_DEPS]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[TMP6:%.*]], !dbg [[DBG13]]
; CHECK:       6:
; CHECK-NEXT:    store i32 0, i32* [[I]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP7:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0:%.*]] @compute_dep.1(i32* [[I]], i32* [[J]], i64 0), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP8:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]], 0, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP9:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]], 2, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP10:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP7]], 3, !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP8]], i32* [[I]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG13]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP12:%.*]] = icmp sle i32 [[TMP11]], [[TMP9]], !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP12]], label [[FOR_BODY:%.*]], label [[TMP25:%.*]], !dbg [[DBG13]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP13:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @compute_dep.1(i32* [[I]], i32* [[J]], i64 0), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP14:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP13]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP14]], i32* [[I_REMAP]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    store i32 0, i32* [[J]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP15:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @compute_dep.1(i32* [[I_REMAP]], i32* [[J]], i64 1), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP16:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP15]], 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP17:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP15]], 6, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP18:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP15]], 7, !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP16]], i32* [[J]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG13]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, i32* [[J]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP20:%.*]] = icmp sle i32 [[TMP19]], [[TMP17]], !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP20]], label [[FOR_BODY2:%.*]], label [[FOR_INCR:%.*]], !dbg [[DBG13]]
; CHECK:       for.body2:
; CHECK-NEXT:    [[TMP21:%.*]] = call [[STRUCT__DEPEND_UNPACK_T_0]] @compute_dep.1(i32* [[I_REMAP]], i32* [[J]], i64 1), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP22:%.*]] = extractvalue [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP21]], 5, !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP22]], i32* [[J_REMAP]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP23:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP24:%.*]] = add i64 [[TMP23]], 1, !dbg [[DBG13]]
; CHECK-NEXT:    store i64 [[TMP24]], i64* [[NUM_DEPS]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_INCR3:%.*]], !dbg [[DBG13]]
; CHECK:       25:
; CHECK-NEXT:    [[TMP26:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_create_task(%nanos6_task_info_t* @task_info_var_main0, %nanos6_task_invocation_info_t* @task_invocation_info_main0, i64 16, i8** [[TMP3]], i8** [[TMP2]], i64 0, i64 [[TMP26]]), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP27:%.*]] = load %nanos6_task_args_main0*, %nanos6_task_args_main0** [[TMP1]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP28:%.*]] = bitcast %nanos6_task_args_main0* [[TMP27]] to i8*, !dbg [[DBG13]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP28]], i64 16, !dbg [[DBG13]]
; CHECK-NEXT:    [[GEP_ARRAY:%.*]] = getelementptr [[NANOS6_TASK_ARGS_MAIN0:%.*]], %nanos6_task_args_main0* [[TMP27]], i32 0, i32 0, !dbg [[DBG13]]
; CHECK-NEXT:    store [10 x i32]* [[ARRAY]], [10 x i32]** [[GEP_ARRAY]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP29:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG13]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP29]]), !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG13]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG14:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG14]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ne i32 [[TMP30]], 0, !dbg [[DBG13]]
; CHECK-NEXT:    br i1 [[TMP31]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG13]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP32:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP33:%.*]] = add i32 [[TMP32]], [[TMP10]], !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP33]], i32* [[I]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG13]]
; CHECK:       for.incr3:
; CHECK-NEXT:    [[TMP34:%.*]] = load i32, i32* [[J]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    [[TMP35:%.*]] = add i32 [[TMP34]], [[TMP18]], !dbg [[DBG13]]
; CHECK-NEXT:    store i32 [[TMP35]], i32* [[J]], align 4, !dbg [[DBG13]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG13]]
;
entry:
  %array = alloca [10 x i32], align 16
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4, !dbg !10
  %0 = load i32, i32* %i, align 4, !dbg !11
  store i32 %0, i32* %j, align 4, !dbg !12
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([5 x i8] c"TASK\00"), "QUAL.OSS.SHARED"([10 x i32]* %array), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.PRIVATE"(i32* %j), "QUAL.OSS.DEP.IN"([10 x i32]* %array, [9 x i8] c"array[0]\00", %struct._depend_unpack_t ([10 x i32]*)* @compute_dep, [10 x i32]* %array), "QUAL.OSS.MULTIDEP.RANGE.IN"(i32* %i, i32* %j, %struct._depend_unpack_t.0 (i32*, i32*, i64)* @compute_dep.1, i32* %i, i32* %j, [10 x i32]* %array, [35 x i8] c"{ array[1], i = 0 : 9, j = i : 9 }\00", %struct._depend_unpack_t.1 ([10 x i32]*, i32*, i32*)* @compute_dep.2, [10 x i32]* %array, i32* %i, i32* %j) ], !dbg !13
  call void @llvm.directive.region.exit(token %1), !dbg !14
  ret i32 0, !dbg !15
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal %struct._depend_unpack_t @compute_dep([10 x i32]* %array) #2 !dbg !16 {
; CHECK-LABEL: @compute_dep(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca [10 x i32]*, align 8
; CHECK-NEXT:    store [10 x i32]* [[ARRAY:%.*]], [10 x i32]** [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [10 x i32], [10 x i32]* [[ARRAY]], i64 0, i64 0, !dbg [[DBG16:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], %struct._depend_unpack_t* [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store i32* [[ARRAYDECAY]], i32** [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], %struct._depend_unpack_t* [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 40, i64* [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], %struct._depend_unpack_t* [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 0, i64* [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T]], %struct._depend_unpack_t* [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 4, i64* [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T]], %struct._depend_unpack_t* [[RETVAL]], align 8, !dbg [[DBG16]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T]] [[TMP4]], !dbg [[DBG16]]
;
entry:
  %retval = alloca %struct._depend_unpack_t, align 8
  %array.addr = alloca [10 x i32]*, align 8
  store [10 x i32]* %array, [10 x i32]** %array.addr, align 8
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %array, i64 0, i64 0, !dbg !17
  %0 = getelementptr inbounds %struct._depend_unpack_t, %struct._depend_unpack_t* %retval, i32 0, i32 0
  store i32* %arraydecay, i32** %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t, %struct._depend_unpack_t* %retval, i32 0, i32 1
  store i64 40, i64* %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t, %struct._depend_unpack_t* %retval, i32 0, i32 2
  store i64 0, i64* %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t, %struct._depend_unpack_t* %retval, i32 0, i32 3
  store i64 4, i64* %3, align 8
  %4 = load %struct._depend_unpack_t, %struct._depend_unpack_t* %retval, align 8, !dbg !17
  ret %struct._depend_unpack_t %4, !dbg !17
}

define internal %struct._depend_unpack_t.0 @compute_dep.1(i32* %i, i32* %j, i64 %0) #2 !dbg !18 {
; CHECK-LABEL: @compute_dep.1(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_0:%.*]], align 4
; CHECK-NEXT:    [[I_ADDR:%.*]] = alloca i32*, align 8
; CHECK-NEXT:    [[J_ADDR:%.*]] = alloca i32*, align 8
; CHECK-NEXT:    [[DOTADDR:%.*]] = alloca i64, align 8
; CHECK-NEXT:    store i32* [[I:%.*]], i32** [[I_ADDR]], align 8
; CHECK-NEXT:    store i32* [[J:%.*]], i32** [[J_ADDR]], align 8
; CHECK-NEXT:    store i64 [[TMP0:%.*]], i64* [[DOTADDR]], align 8
; CHECK-NEXT:    switch i64 [[TMP0]], label [[TMP3:%.*]] [
; CHECK-NEXT:    i64 0, label [[TMP4:%.*]]
; CHECK-NEXT:    i64 1, label [[TMP10:%.*]]
; CHECK-NEXT:    ]
; CHECK:       1:
; CHECK-NEXT:    [[TMP2:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_0]], %struct._depend_unpack_t.0* [[RETVAL]], align 4, !dbg [[DBG18:![0-9]+]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_0]] [[TMP2]], !dbg [[DBG18]]
; CHECK:       3:
; CHECK-NEXT:    br label [[TMP1:%.*]]
; CHECK:       4:
; CHECK-NEXT:    [[TMP5:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG19:![0-9]+]]
; CHECK-NEXT:    [[TMP6:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], %struct._depend_unpack_t.0* [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store i32 0, i32* [[TMP6]], align 4
; CHECK-NEXT:    [[TMP7:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], %struct._depend_unpack_t.0* [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i32 [[TMP5]], i32* [[TMP7]], align 4
; CHECK-NEXT:    [[TMP8:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], %struct._depend_unpack_t.0* [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i32 9, i32* [[TMP8]], align 4
; CHECK-NEXT:    [[TMP9:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], %struct._depend_unpack_t.0* [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i32 1, i32* [[TMP9]], align 4
; CHECK-NEXT:    br label [[TMP1]]
; CHECK:       10:
; CHECK-NEXT:    [[TMP11:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG20:![0-9]+]]
; CHECK-NEXT:    [[TMP12:%.*]] = load i32, i32* [[J]], align 4, !dbg [[DBG21:![0-9]+]]
; CHECK-NEXT:    [[TMP13:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], %struct._depend_unpack_t.0* [[RETVAL]], i32 0, i32 4
; CHECK-NEXT:    store i32 [[TMP11]], i32* [[TMP13]], align 4
; CHECK-NEXT:    [[TMP14:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], %struct._depend_unpack_t.0* [[RETVAL]], i32 0, i32 5
; CHECK-NEXT:    store i32 [[TMP12]], i32* [[TMP14]], align 4
; CHECK-NEXT:    [[TMP15:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], %struct._depend_unpack_t.0* [[RETVAL]], i32 0, i32 6
; CHECK-NEXT:    store i32 9, i32* [[TMP15]], align 4
; CHECK-NEXT:    [[TMP16:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_0]], %struct._depend_unpack_t.0* [[RETVAL]], i32 0, i32 7
; CHECK-NEXT:    store i32 1, i32* [[TMP16]], align 4
; CHECK-NEXT:    br label [[TMP1]]
;
entry:
  %retval = alloca %struct._depend_unpack_t.0, align 4
  %i.addr = alloca i32*, align 8
  %j.addr = alloca i32*, align 8
  %.addr = alloca i64, align 8
  store i32* %i, i32** %i.addr, align 8
  store i32* %j, i32** %j.addr, align 8
  store i64 %0, i64* %.addr, align 8
  switch i64 %0, label %3 [
  i64 0, label %4
  i64 1, label %10
  ]

1:                                                ; preds = %10, %4, %3
  %2 = load %struct._depend_unpack_t.0, %struct._depend_unpack_t.0* %retval, align 4, !dbg !19
  ret %struct._depend_unpack_t.0 %2, !dbg !19

3:                                                ; preds = %entry
  br label %1

4:                                                ; preds = %entry
  %5 = load i32, i32* %i, align 4, !dbg !20
  %6 = getelementptr inbounds %struct._depend_unpack_t.0, %struct._depend_unpack_t.0* %retval, i32 0, i32 0
  store i32 0, i32* %6, align 4
  %7 = getelementptr inbounds %struct._depend_unpack_t.0, %struct._depend_unpack_t.0* %retval, i32 0, i32 1
  store i32 %5, i32* %7, align 4
  %8 = getelementptr inbounds %struct._depend_unpack_t.0, %struct._depend_unpack_t.0* %retval, i32 0, i32 2
  store i32 9, i32* %8, align 4
  %9 = getelementptr inbounds %struct._depend_unpack_t.0, %struct._depend_unpack_t.0* %retval, i32 0, i32 3
  store i32 1, i32* %9, align 4
  br label %1

10:                                               ; preds = %entry
  %11 = load i32, i32* %i, align 4, !dbg !21
  %12 = load i32, i32* %j, align 4, !dbg !22
  %13 = getelementptr inbounds %struct._depend_unpack_t.0, %struct._depend_unpack_t.0* %retval, i32 0, i32 4
  store i32 %11, i32* %13, align 4
  %14 = getelementptr inbounds %struct._depend_unpack_t.0, %struct._depend_unpack_t.0* %retval, i32 0, i32 5
  store i32 %12, i32* %14, align 4
  %15 = getelementptr inbounds %struct._depend_unpack_t.0, %struct._depend_unpack_t.0* %retval, i32 0, i32 6
  store i32 9, i32* %15, align 4
  %16 = getelementptr inbounds %struct._depend_unpack_t.0, %struct._depend_unpack_t.0* %retval, i32 0, i32 7
  store i32 1, i32* %16, align 4
  br label %1
}

define internal %struct._depend_unpack_t.1 @compute_dep.2([10 x i32]* %array, i32* %i, i32* %j) #2 !dbg !23 {
; CHECK-LABEL: @compute_dep.2(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[RETVAL:%.*]] = alloca [[STRUCT__DEPEND_UNPACK_T_1:%.*]], align 8
; CHECK-NEXT:    [[ARRAY_ADDR:%.*]] = alloca [10 x i32]*, align 8
; CHECK-NEXT:    [[I_ADDR:%.*]] = alloca i32*, align 8
; CHECK-NEXT:    [[J_ADDR:%.*]] = alloca i32*, align 8
; CHECK-NEXT:    store [10 x i32]* [[ARRAY:%.*]], [10 x i32]** [[ARRAY_ADDR]], align 8
; CHECK-NEXT:    store i32* [[I:%.*]], i32** [[I_ADDR]], align 8
; CHECK-NEXT:    store i32* [[J:%.*]], i32** [[J_ADDR]], align 8
; CHECK-NEXT:    [[ARRAYDECAY:%.*]] = getelementptr inbounds [10 x i32], [10 x i32]* [[ARRAY]], i64 0, i64 0, !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], %struct._depend_unpack_t.1* [[RETVAL]], i32 0, i32 0
; CHECK-NEXT:    store i32* [[ARRAYDECAY]], i32** [[TMP0]], align 8
; CHECK-NEXT:    [[TMP1:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], %struct._depend_unpack_t.1* [[RETVAL]], i32 0, i32 1
; CHECK-NEXT:    store i64 40, i64* [[TMP1]], align 8
; CHECK-NEXT:    [[TMP2:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], %struct._depend_unpack_t.1* [[RETVAL]], i32 0, i32 2
; CHECK-NEXT:    store i64 4, i64* [[TMP2]], align 8
; CHECK-NEXT:    [[TMP3:%.*]] = getelementptr inbounds [[STRUCT__DEPEND_UNPACK_T_1]], %struct._depend_unpack_t.1* [[RETVAL]], i32 0, i32 3
; CHECK-NEXT:    store i64 8, i64* [[TMP3]], align 8
; CHECK-NEXT:    [[TMP4:%.*]] = load [[STRUCT__DEPEND_UNPACK_T_1]], %struct._depend_unpack_t.1* [[RETVAL]], align 8, !dbg [[DBG23]]
; CHECK-NEXT:    ret [[STRUCT__DEPEND_UNPACK_T_1]] [[TMP4]], !dbg [[DBG23]]
;
entry:
  %retval = alloca %struct._depend_unpack_t.1, align 8
  %array.addr = alloca [10 x i32]*, align 8
  %i.addr = alloca i32*, align 8
  %j.addr = alloca i32*, align 8
  store [10 x i32]* %array, [10 x i32]** %array.addr, align 8
  store i32* %i, i32** %i.addr, align 8
  store i32* %j, i32** %j.addr, align 8
  %arraydecay = getelementptr inbounds [10 x i32], [10 x i32]* %array, i64 0, i64 0, !dbg !24
  %0 = getelementptr inbounds %struct._depend_unpack_t.1, %struct._depend_unpack_t.1* %retval, i32 0, i32 0
  store i32* %arraydecay, i32** %0, align 8
  %1 = getelementptr inbounds %struct._depend_unpack_t.1, %struct._depend_unpack_t.1* %retval, i32 0, i32 1
  store i64 40, i64* %1, align 8
  %2 = getelementptr inbounds %struct._depend_unpack_t.1, %struct._depend_unpack_t.1* %retval, i32 0, i32 2
  store i64 4, i64* %2, align 8
  %3 = getelementptr inbounds %struct._depend_unpack_t.1, %struct._depend_unpack_t.1* %retval, i32 0, i32 3
  store i64 8, i64* %3, align 8
  %4 = load %struct._depend_unpack_t.1, %struct._depend_unpack_t.1* %retval, align 8, !dbg !24
  ret %struct._depend_unpack_t.1 %4, !dbg !24
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6}
!llvm.ident = !{!7}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "multideps_dep_counter.ll", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"uwtable", i32 1}
!6 = !{i32 7, !"frame-pointer", i32 2}
!7 = !{!""}
!8 = distinct !DISubprogram(name: "main", scope: !1, file: !1, line: 1, type: !9, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!9 = !DISubroutineType(types: !2)
!10 = !DILocation(line: 3, column: 48, scope: !8)
!11 = !DILocation(line: 3, column: 63, scope: !8)
!12 = !DILocation(line: 3, column: 59, scope: !8)
!13 = !DILocation(line: 3, column: 13, scope: !8)
!14 = !DILocation(line: 4, column: 6, scope: !8)
!15 = !DILocation(line: 5, column: 1, scope: !8)
!16 = distinct !DISubprogram(linkageName: "compute_dep", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!17 = !DILocation(line: 3, column: 26, scope: !16)
!18 = distinct !DISubprogram(linkageName: "compute_dep.1", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!19 = !DILocation(line: 3, column: 67, scope: !18)
!20 = !DILocation(line: 3, column: 48, scope: !18)
!21 = !DILocation(line: 3, column: 63, scope: !18)
!22 = !DILocation(line: 3, column: 59, scope: !18)
!23 = distinct !DISubprogram(linkageName: "compute_dep.2", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!24 = !DILocation(line: 3, column: 38, scope: !23)


; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 'task_for_cond_and_register_check.ll'
source_filename = "task_for_cond_and_register_check.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; void signed_loop_slt(int lb, int ub, int step) {
;     #pragma oss task for
;     for (int i = lb; i < ub; i += step) {}
; }
; void signed_loop_sle(int lb, int ub, int step) {
;     #pragma oss task for
;     for (int i = lb; i <= ub; i += step) {}
; }
; void signed_loop_sgt(int lb, int ub, int step) {
;     #pragma oss task for
;     for (int i = ub; i > lb; i -= step) {}
; }
; void signed_loop_sge(int lb, int ub, int step) {
;     #pragma oss task for
;     for (int i = ub; i >= lb; i -= step) {}
; }
; void unsigned_loop_slt(unsigned lb, unsigned ub, unsigned step) {
;     #pragma oss task for
;     for (unsigned i = lb; i < ub; i += step) {}
; }
; void unsigned_loop_sle(unsigned lb, unsigned ub, unsigned step) {
;     #pragma oss task for
;     for (unsigned i = lb; i <= ub; i += step) {}
; }
; void unsigned_loop_sgt(unsigned lb, unsigned ub, unsigned step) {
;     #pragma oss task for
;     for (unsigned i = ub; i > lb; i -= step) {}
; }
; void unsigned_loop_sge(unsigned lb, unsigned ub, unsigned step) {
;     #pragma oss task for
;     for (unsigned i = ub; i >= lb; i -= step) {}
; }
; void constants_loop() {
;     #pragma oss task for
;     for (int i = 0; i < 10; i += 1) {}
; }

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @signed_loop_slt(i32 %lb, i32 %ub, i32 %step) #0 !dbg !8 {
; CHECK-LABEL: @signed_loop_slt(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[LB_ADDR]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[I]], align 4, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_signed_loop_slt0*, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_signed_loop_slt0** [[TMP1]] to i8**, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_lb(i32* [[LB_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_ub(i32* [[UB_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_step(i32* [[STEP_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP6]], [[TMP5]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP8]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP10:%.*]] = sdiv i32 [[TMP9]], [[TMP7]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP12:%.*]] = sext i32 [[TMP11]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = mul i64 1, [[TMP12]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_signed_loop_slt0, %nanos6_task_invocation_info_t* @task_invocation_info_signed_loop_slt0, i64 16, i8** [[TMP3]], i8** [[TMP2]], i64 8, i64 [[TMP4]], i64 0, i64 [[TMP13]], i64 0, i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP14:%.*]] = load %nanos6_task_args_signed_loop_slt0*, %nanos6_task_args_signed_loop_slt0** [[TMP1]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast %nanos6_task_args_signed_loop_slt0* [[TMP14]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP15]], i64 16, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_LB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SLT0:%.*]], %nanos6_task_args_signed_loop_slt0* [[TMP14]], i32 0, i32 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[GEP_LB_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[LB_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP16]], i8* align 4 [[TMP17]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_UB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SLT0]], %nanos6_task_args_signed_loop_slt0* [[TMP14]], i32 0, i32 2, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[GEP_UB_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[UB_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP18]], i8* align 4 [[TMP19]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_STEP_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SLT0]], %nanos6_task_args_signed_loop_slt0* [[TMP14]], i32 0, i32 3, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[GEP_STEP_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast i32* [[STEP_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP20]], i8* align 4 [[TMP21]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP22:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP22]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG12]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG13:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_lb(i32* [[LB_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_ub(i32* [[UB_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @compute_step(i32* [[STEP_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP23]], i32* [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP27:%.*]] = icmp slt i32 [[TMP26]], [[TMP24]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP27]], label [[TMP28:%.*]], label [[FOR_END:%.*]], !dbg [[DBG12]]
; CHECK:       28:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG12]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG13]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP29]], [[TMP25]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP30]], i32* [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG12]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ne i32 [[TMP31]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG12]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG12]]
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %lb.addr, align 4, !dbg !10
  store i32 %0, i32* %i, align 4, !dbg !11
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.FIRSTPRIVATE"(i32* %lb.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %ub.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %step.addr), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 (i32*)* @compute_lb, i32* %lb.addr), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 (i32*)* @compute_ub, i32* %ub.addr), "QUAL.OSS.LOOP.STEP"(i32 (i32*)* @compute_step, i32* %step.addr), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !12
  call void @llvm.directive.region.exit(token %1), !dbg !13
  ret void, !dbg !14
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb(i32* %lb) #2 !dbg !15 {
entry:
  %lb.addr = alloca i32*, align 8
  store i32* %lb, i32** %lb.addr, align 8
  %0 = load i32, i32* %lb, align 4, !dbg !16
  ret i32 %0, !dbg !16
}

define internal i32 @compute_ub(i32* %ub) #2 !dbg !17 {
entry:
  %ub.addr = alloca i32*, align 8
  store i32* %ub, i32** %ub.addr, align 8
  %0 = load i32, i32* %ub, align 4, !dbg !18
  ret i32 %0, !dbg !18
}

define internal i32 @compute_step(i32* %step) #2 !dbg !19 {
entry:
  %step.addr = alloca i32*, align 8
  store i32* %step, i32** %step.addr, align 8
  %0 = load i32, i32* %step, align 4, !dbg !20
  ret i32 %0, !dbg !20
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @signed_loop_sle(i32 %lb, i32 %ub, i32 %step) #0 !dbg !21 {
; CHECK-LABEL: @signed_loop_sle(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[LB_ADDR]], align 4, !dbg [[DBG21:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[I]], align 4, !dbg [[DBG22:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_signed_loop_sle0*, align 8, !dbg [[DBG23:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG23]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG23]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG23]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_signed_loop_sle0** [[TMP1]] to i8**, !dbg [[DBG23]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_lb.1(i32* [[LB_ADDR]]), !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_ub.2(i32* [[UB_ADDR]]), !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_step.3(i32* [[STEP_ADDR]]), !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP6]], [[TMP5]], !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP9:%.*]] = sdiv i32 [[TMP8]], [[TMP7]], !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext i32 [[TMP10]] to i64, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP12:%.*]] = mul i64 1, [[TMP11]], !dbg [[DBG23]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_signed_loop_sle0, %nanos6_task_invocation_info_t* @task_invocation_info_signed_loop_sle0, i64 16, i8** [[TMP3]], i8** [[TMP2]], i64 8, i64 [[TMP4]], i64 0, i64 [[TMP12]], i64 0, i64 0), !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP13:%.*]] = load %nanos6_task_args_signed_loop_sle0*, %nanos6_task_args_signed_loop_sle0** [[TMP1]], align 8, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast %nanos6_task_args_signed_loop_sle0* [[TMP13]] to i8*, !dbg [[DBG23]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP14]], i64 16, !dbg [[DBG23]]
; CHECK-NEXT:    [[GEP_LB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SLE0:%.*]], %nanos6_task_args_signed_loop_sle0* [[TMP13]], i32 0, i32 1, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast i32* [[GEP_LB_ADDR]] to i8*, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[LB_ADDR]] to i8*, !dbg [[DBG23]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP15]], i8* align 4 [[TMP16]], i64 4, i1 false), !dbg [[DBG23]]
; CHECK-NEXT:    [[GEP_UB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SLE0]], %nanos6_task_args_signed_loop_sle0* [[TMP13]], i32 0, i32 2, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[GEP_UB_ADDR]] to i8*, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[UB_ADDR]] to i8*, !dbg [[DBG23]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP17]], i8* align 4 [[TMP18]], i64 4, i1 false), !dbg [[DBG23]]
; CHECK-NEXT:    [[GEP_STEP_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SLE0]], %nanos6_task_args_signed_loop_sle0* [[TMP13]], i32 0, i32 3, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[GEP_STEP_ADDR]] to i8*, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[STEP_ADDR]] to i8*, !dbg [[DBG23]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP19]], i8* align 4 [[TMP20]], i64 4, i1 false), !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP21:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG23]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP21]]), !dbg [[DBG23]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG23]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG24:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @compute_lb.1(i32* [[LB_ADDR]]), !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_ub.2(i32* [[UB_ADDR]]), !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_step.3(i32* [[STEP_ADDR]]), !dbg [[DBG23]]
; CHECK-NEXT:    store i32 [[TMP22]], i32* [[I]], align 4, !dbg [[DBG23]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG23]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP26:%.*]] = icmp sle i32 [[TMP25]], [[TMP23]], !dbg [[DBG23]]
; CHECK-NEXT:    br i1 [[TMP26]], label [[TMP27:%.*]], label [[FOR_END:%.*]], !dbg [[DBG23]]
; CHECK:       27:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG23]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG24]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG23]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP28:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP28]], [[TMP24]], !dbg [[DBG23]]
; CHECK-NEXT:    store i32 [[TMP29]], i32* [[I]], align 4, !dbg [[DBG23]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG23]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG23]]
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ne i32 [[TMP30]], 0, !dbg [[DBG23]]
; CHECK-NEXT:    br i1 [[TMP31]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG23]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG23]]
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %lb.addr, align 4, !dbg !22
  store i32 %0, i32* %i, align 4, !dbg !23
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.FIRSTPRIVATE"(i32* %lb.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %ub.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %step.addr), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 (i32*)* @compute_lb.1, i32* %lb.addr), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 (i32*)* @compute_ub.2, i32* %ub.addr), "QUAL.OSS.LOOP.STEP"(i32 (i32*)* @compute_step.3, i32* %step.addr), "QUAL.OSS.LOOP.TYPE"(i64 1, i64 1, i64 1, i64 1, i64 1) ], !dbg !24
  call void @llvm.directive.region.exit(token %1), !dbg !25
  ret void, !dbg !26
}

define internal i32 @compute_lb.1(i32* %lb) #2 !dbg !27 {
entry:
  %lb.addr = alloca i32*, align 8
  store i32* %lb, i32** %lb.addr, align 8
  %0 = load i32, i32* %lb, align 4, !dbg !28
  ret i32 %0, !dbg !28
}

define internal i32 @compute_ub.2(i32* %ub) #2 !dbg !29 {
entry:
  %ub.addr = alloca i32*, align 8
  store i32* %ub, i32** %ub.addr, align 8
  %0 = load i32, i32* %ub, align 4, !dbg !30
  ret i32 %0, !dbg !30
}

define internal i32 @compute_step.3(i32* %step) #2 !dbg !31 {
entry:
  %step.addr = alloca i32*, align 8
  store i32* %step, i32** %step.addr, align 8
  %0 = load i32, i32* %step, align 4, !dbg !32
  ret i32 %0, !dbg !32
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @signed_loop_sgt(i32 %lb, i32 %ub, i32 %step) #0 !dbg !33 {
; CHECK-LABEL: @signed_loop_sgt(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[UB_ADDR]], align 4, !dbg [[DBG32:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[I]], align 4, !dbg [[DBG33:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_signed_loop_sgt0*, align 8, !dbg [[DBG34:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG34]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG34]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG34]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_signed_loop_sgt0** [[TMP1]] to i8**, !dbg [[DBG34]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_lb.4(i32* [[UB_ADDR]]), !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_ub.5(i32* [[LB_ADDR]]), !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_step.6(i32* [[STEP_ADDR]]), !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP6]], [[TMP5]], !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP10:%.*]] = sdiv i32 [[TMP9]], [[TMP7]], !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], 1, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP12:%.*]] = sext i32 [[TMP11]] to i64, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP13:%.*]] = mul i64 1, [[TMP12]], !dbg [[DBG34]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_signed_loop_sgt0, %nanos6_task_invocation_info_t* @task_invocation_info_signed_loop_sgt0, i64 16, i8** [[TMP3]], i8** [[TMP2]], i64 8, i64 [[TMP4]], i64 0, i64 [[TMP13]], i64 0, i64 0), !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP14:%.*]] = load %nanos6_task_args_signed_loop_sgt0*, %nanos6_task_args_signed_loop_sgt0** [[TMP1]], align 8, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast %nanos6_task_args_signed_loop_sgt0* [[TMP14]] to i8*, !dbg [[DBG34]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP15]], i64 16, !dbg [[DBG34]]
; CHECK-NEXT:    [[GEP_UB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SGT0:%.*]], %nanos6_task_args_signed_loop_sgt0* [[TMP14]], i32 0, i32 1, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[GEP_UB_ADDR]] to i8*, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[UB_ADDR]] to i8*, !dbg [[DBG34]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP16]], i8* align 4 [[TMP17]], i64 4, i1 false), !dbg [[DBG34]]
; CHECK-NEXT:    [[GEP_LB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SGT0]], %nanos6_task_args_signed_loop_sgt0* [[TMP14]], i32 0, i32 2, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[GEP_LB_ADDR]] to i8*, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[LB_ADDR]] to i8*, !dbg [[DBG34]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP18]], i8* align 4 [[TMP19]], i64 4, i1 false), !dbg [[DBG34]]
; CHECK-NEXT:    [[GEP_STEP_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SGT0]], %nanos6_task_args_signed_loop_sgt0* [[TMP14]], i32 0, i32 3, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[GEP_STEP_ADDR]] to i8*, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast i32* [[STEP_ADDR]] to i8*, !dbg [[DBG34]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP20]], i8* align 4 [[TMP21]], i64 4, i1 false), !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP22:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG34]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP22]]), !dbg [[DBG34]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG34]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG35:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_lb.4(i32* [[UB_ADDR]]), !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_ub.5(i32* [[LB_ADDR]]), !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @compute_step.6(i32* [[STEP_ADDR]]), !dbg [[DBG34]]
; CHECK-NEXT:    store i32 [[TMP23]], i32* [[I]], align 4, !dbg [[DBG34]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG34]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP27:%.*]] = icmp sgt i32 [[TMP26]], [[TMP24]], !dbg [[DBG34]]
; CHECK-NEXT:    br i1 [[TMP27]], label [[TMP28:%.*]], label [[FOR_END:%.*]], !dbg [[DBG34]]
; CHECK:       28:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG34]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG35]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG34]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP29]], [[TMP25]], !dbg [[DBG34]]
; CHECK-NEXT:    store i32 [[TMP30]], i32* [[I]], align 4, !dbg [[DBG34]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG34]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG34]]
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ne i32 [[TMP31]], 0, !dbg [[DBG34]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG34]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG34]]
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %ub.addr, align 4, !dbg !34
  store i32 %0, i32* %i, align 4, !dbg !35
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.FIRSTPRIVATE"(i32* %ub.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %lb.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %step.addr), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 (i32*)* @compute_lb.4, i32* %ub.addr), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 (i32*)* @compute_ub.5, i32* %lb.addr), "QUAL.OSS.LOOP.STEP"(i32 (i32*)* @compute_step.6, i32* %step.addr), "QUAL.OSS.LOOP.TYPE"(i64 2, i64 1, i64 1, i64 1, i64 1) ], !dbg !36
  call void @llvm.directive.region.exit(token %1), !dbg !37
  ret void, !dbg !38
}

define internal i32 @compute_lb.4(i32* %ub) #2 !dbg !39 {
entry:
  %ub.addr = alloca i32*, align 8
  store i32* %ub, i32** %ub.addr, align 8
  %0 = load i32, i32* %ub, align 4, !dbg !40
  ret i32 %0, !dbg !40
}

define internal i32 @compute_ub.5(i32* %lb) #2 !dbg !41 {
entry:
  %lb.addr = alloca i32*, align 8
  store i32* %lb, i32** %lb.addr, align 8
  %0 = load i32, i32* %lb, align 4, !dbg !42
  ret i32 %0, !dbg !42
}

define internal i32 @compute_step.6(i32* %step) #2 !dbg !43 {
entry:
  %step.addr = alloca i32*, align 8
  store i32* %step, i32** %step.addr, align 8
  %0 = load i32, i32* %step, align 4, !dbg !44
  %sub = sub nsw i32 0, %0, !dbg !44
  ret i32 %sub, !dbg !44
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @signed_loop_sge(i32 %lb, i32 %ub, i32 %step) #0 !dbg !45 {
; CHECK-LABEL: @signed_loop_sge(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[UB_ADDR]], align 4, !dbg [[DBG43:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[I]], align 4, !dbg [[DBG44:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_signed_loop_sge0*, align 8, !dbg [[DBG45:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG45]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG45]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG45]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_signed_loop_sge0** [[TMP1]] to i8**, !dbg [[DBG45]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_lb.7(i32* [[UB_ADDR]]), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_ub.8(i32* [[LB_ADDR]]), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_step.9(i32* [[STEP_ADDR]]), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP6]], [[TMP5]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP9:%.*]] = sdiv i32 [[TMP8]], [[TMP7]], !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext i32 [[TMP10]] to i64, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP12:%.*]] = mul i64 1, [[TMP11]], !dbg [[DBG45]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_signed_loop_sge0, %nanos6_task_invocation_info_t* @task_invocation_info_signed_loop_sge0, i64 16, i8** [[TMP3]], i8** [[TMP2]], i64 8, i64 [[TMP4]], i64 0, i64 [[TMP12]], i64 0, i64 0), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP13:%.*]] = load %nanos6_task_args_signed_loop_sge0*, %nanos6_task_args_signed_loop_sge0** [[TMP1]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast %nanos6_task_args_signed_loop_sge0* [[TMP13]] to i8*, !dbg [[DBG45]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP14]], i64 16, !dbg [[DBG45]]
; CHECK-NEXT:    [[GEP_UB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SGE0:%.*]], %nanos6_task_args_signed_loop_sge0* [[TMP13]], i32 0, i32 1, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast i32* [[GEP_UB_ADDR]] to i8*, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[UB_ADDR]] to i8*, !dbg [[DBG45]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP15]], i8* align 4 [[TMP16]], i64 4, i1 false), !dbg [[DBG45]]
; CHECK-NEXT:    [[GEP_LB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SGE0]], %nanos6_task_args_signed_loop_sge0* [[TMP13]], i32 0, i32 2, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[GEP_LB_ADDR]] to i8*, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[LB_ADDR]] to i8*, !dbg [[DBG45]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP17]], i8* align 4 [[TMP18]], i64 4, i1 false), !dbg [[DBG45]]
; CHECK-NEXT:    [[GEP_STEP_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_SIGNED_LOOP_SGE0]], %nanos6_task_args_signed_loop_sge0* [[TMP13]], i32 0, i32 3, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[GEP_STEP_ADDR]] to i8*, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[STEP_ADDR]] to i8*, !dbg [[DBG45]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP19]], i8* align 4 [[TMP20]], i64 4, i1 false), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP21:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG45]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP21]]), !dbg [[DBG45]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG45]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG46:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @compute_lb.7(i32* [[UB_ADDR]]), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_ub.8(i32* [[LB_ADDR]]), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_step.9(i32* [[STEP_ADDR]]), !dbg [[DBG45]]
; CHECK-NEXT:    store i32 [[TMP22]], i32* [[I]], align 4, !dbg [[DBG45]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG45]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP26:%.*]] = icmp sge i32 [[TMP25]], [[TMP23]], !dbg [[DBG45]]
; CHECK-NEXT:    br i1 [[TMP26]], label [[TMP27:%.*]], label [[FOR_END:%.*]], !dbg [[DBG45]]
; CHECK:       27:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG45]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG46]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG45]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP28:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP28]], [[TMP24]], !dbg [[DBG45]]
; CHECK-NEXT:    store i32 [[TMP29]], i32* [[I]], align 4, !dbg [[DBG45]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG45]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG45]]
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ne i32 [[TMP30]], 0, !dbg [[DBG45]]
; CHECK-NEXT:    br i1 [[TMP31]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG45]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG45]]
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %ub.addr, align 4, !dbg !46
  store i32 %0, i32* %i, align 4, !dbg !47
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.FIRSTPRIVATE"(i32* %ub.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %lb.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %step.addr), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 (i32*)* @compute_lb.7, i32* %ub.addr), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 (i32*)* @compute_ub.8, i32* %lb.addr), "QUAL.OSS.LOOP.STEP"(i32 (i32*)* @compute_step.9, i32* %step.addr), "QUAL.OSS.LOOP.TYPE"(i64 3, i64 1, i64 1, i64 1, i64 1) ], !dbg !48
  call void @llvm.directive.region.exit(token %1), !dbg !49
  ret void, !dbg !50
}

define internal i32 @compute_lb.7(i32* %ub) #2 !dbg !51 {
entry:
  %ub.addr = alloca i32*, align 8
  store i32* %ub, i32** %ub.addr, align 8
  %0 = load i32, i32* %ub, align 4, !dbg !52
  ret i32 %0, !dbg !52
}

define internal i32 @compute_ub.8(i32* %lb) #2 !dbg !53 {
entry:
  %lb.addr = alloca i32*, align 8
  store i32* %lb, i32** %lb.addr, align 8
  %0 = load i32, i32* %lb, align 4, !dbg !54
  ret i32 %0, !dbg !54
}

define internal i32 @compute_step.9(i32* %step) #2 !dbg !55 {
entry:
  %step.addr = alloca i32*, align 8
  store i32* %step, i32** %step.addr, align 8
  %0 = load i32, i32* %step, align 4, !dbg !56
  %sub = sub nsw i32 0, %0, !dbg !56
  ret i32 %sub, !dbg !56
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @unsigned_loop_slt(i32 %lb, i32 %ub, i32 %step) #0 !dbg !57 {
; CHECK-LABEL: @unsigned_loop_slt(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[LB_ADDR]], align 4, !dbg [[DBG54:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[I]], align 4, !dbg [[DBG55:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_unsigned_loop_slt0*, align 8, !dbg [[DBG56:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG56]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG56]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG56]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_unsigned_loop_slt0** [[TMP1]] to i8**, !dbg [[DBG56]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_lb.10(i32* [[LB_ADDR]]), !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_ub.11(i32* [[UB_ADDR]]), !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_step.12(i32* [[STEP_ADDR]]), !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP6]], [[TMP5]], !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP8]], 1, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP10:%.*]] = udiv i32 [[TMP9]], [[TMP7]], !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], 1, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP12:%.*]] = zext i32 [[TMP11]] to i64, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP13:%.*]] = mul i64 1, [[TMP12]], !dbg [[DBG56]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_unsigned_loop_slt0, %nanos6_task_invocation_info_t* @task_invocation_info_unsigned_loop_slt0, i64 16, i8** [[TMP3]], i8** [[TMP2]], i64 8, i64 [[TMP4]], i64 0, i64 [[TMP13]], i64 0, i64 0), !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP14:%.*]] = load %nanos6_task_args_unsigned_loop_slt0*, %nanos6_task_args_unsigned_loop_slt0** [[TMP1]], align 8, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast %nanos6_task_args_unsigned_loop_slt0* [[TMP14]] to i8*, !dbg [[DBG56]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP15]], i64 16, !dbg [[DBG56]]
; CHECK-NEXT:    [[GEP_LB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SLT0:%.*]], %nanos6_task_args_unsigned_loop_slt0* [[TMP14]], i32 0, i32 1, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[GEP_LB_ADDR]] to i8*, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[LB_ADDR]] to i8*, !dbg [[DBG56]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP16]], i8* align 4 [[TMP17]], i64 4, i1 false), !dbg [[DBG56]]
; CHECK-NEXT:    [[GEP_UB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SLT0]], %nanos6_task_args_unsigned_loop_slt0* [[TMP14]], i32 0, i32 2, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[GEP_UB_ADDR]] to i8*, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[UB_ADDR]] to i8*, !dbg [[DBG56]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP18]], i8* align 4 [[TMP19]], i64 4, i1 false), !dbg [[DBG56]]
; CHECK-NEXT:    [[GEP_STEP_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SLT0]], %nanos6_task_args_unsigned_loop_slt0* [[TMP14]], i32 0, i32 3, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[GEP_STEP_ADDR]] to i8*, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast i32* [[STEP_ADDR]] to i8*, !dbg [[DBG56]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP20]], i8* align 4 [[TMP21]], i64 4, i1 false), !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP22:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG56]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP22]]), !dbg [[DBG56]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG56]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG57:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_lb.10(i32* [[LB_ADDR]]), !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_ub.11(i32* [[UB_ADDR]]), !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @compute_step.12(i32* [[STEP_ADDR]]), !dbg [[DBG56]]
; CHECK-NEXT:    store i32 [[TMP23]], i32* [[I]], align 4, !dbg [[DBG56]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG56]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP27:%.*]] = icmp ult i32 [[TMP26]], [[TMP24]], !dbg [[DBG56]]
; CHECK-NEXT:    br i1 [[TMP27]], label [[TMP28:%.*]], label [[FOR_END:%.*]], !dbg [[DBG56]]
; CHECK:       28:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG56]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG57]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG56]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP29]], [[TMP25]], !dbg [[DBG56]]
; CHECK-NEXT:    store i32 [[TMP30]], i32* [[I]], align 4, !dbg [[DBG56]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG56]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG56]]
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ne i32 [[TMP31]], 0, !dbg [[DBG56]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG56]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG56]]
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %lb.addr, align 4, !dbg !58
  store i32 %0, i32* %i, align 4, !dbg !59
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.FIRSTPRIVATE"(i32* %lb.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %ub.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %step.addr), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 (i32*)* @compute_lb.10, i32* %lb.addr), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 (i32*)* @compute_ub.11, i32* %ub.addr), "QUAL.OSS.LOOP.STEP"(i32 (i32*)* @compute_step.12, i32* %step.addr), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 0, i64 0, i64 0, i64 0) ], !dbg !60
  call void @llvm.directive.region.exit(token %1), !dbg !61
  ret void, !dbg !62
}

define internal i32 @compute_lb.10(i32* %lb) #2 !dbg !63 {
entry:
  %lb.addr = alloca i32*, align 8
  store i32* %lb, i32** %lb.addr, align 8
  %0 = load i32, i32* %lb, align 4, !dbg !64
  ret i32 %0, !dbg !64
}

define internal i32 @compute_ub.11(i32* %ub) #2 !dbg !65 {
entry:
  %ub.addr = alloca i32*, align 8
  store i32* %ub, i32** %ub.addr, align 8
  %0 = load i32, i32* %ub, align 4, !dbg !66
  ret i32 %0, !dbg !66
}

define internal i32 @compute_step.12(i32* %step) #2 !dbg !67 {
entry:
  %step.addr = alloca i32*, align 8
  store i32* %step, i32** %step.addr, align 8
  %0 = load i32, i32* %step, align 4, !dbg !68
  ret i32 %0, !dbg !68
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @unsigned_loop_sle(i32 %lb, i32 %ub, i32 %step) #0 !dbg !69 {
; CHECK-LABEL: @unsigned_loop_sle(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[LB_ADDR]], align 4, !dbg [[DBG65:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[I]], align 4, !dbg [[DBG66:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_unsigned_loop_sle0*, align 8, !dbg [[DBG67:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG67]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG67]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG67]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_unsigned_loop_sle0** [[TMP1]] to i8**, !dbg [[DBG67]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_lb.13(i32* [[LB_ADDR]]), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_ub.14(i32* [[UB_ADDR]]), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_step.15(i32* [[STEP_ADDR]]), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP6]], [[TMP5]], !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP9:%.*]] = udiv i32 [[TMP8]], [[TMP7]], !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP11:%.*]] = zext i32 [[TMP10]] to i64, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP12:%.*]] = mul i64 1, [[TMP11]], !dbg [[DBG67]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_unsigned_loop_sle0, %nanos6_task_invocation_info_t* @task_invocation_info_unsigned_loop_sle0, i64 16, i8** [[TMP3]], i8** [[TMP2]], i64 8, i64 [[TMP4]], i64 0, i64 [[TMP12]], i64 0, i64 0), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP13:%.*]] = load %nanos6_task_args_unsigned_loop_sle0*, %nanos6_task_args_unsigned_loop_sle0** [[TMP1]], align 8, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast %nanos6_task_args_unsigned_loop_sle0* [[TMP13]] to i8*, !dbg [[DBG67]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP14]], i64 16, !dbg [[DBG67]]
; CHECK-NEXT:    [[GEP_LB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SLE0:%.*]], %nanos6_task_args_unsigned_loop_sle0* [[TMP13]], i32 0, i32 1, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast i32* [[GEP_LB_ADDR]] to i8*, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[LB_ADDR]] to i8*, !dbg [[DBG67]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP15]], i8* align 4 [[TMP16]], i64 4, i1 false), !dbg [[DBG67]]
; CHECK-NEXT:    [[GEP_UB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SLE0]], %nanos6_task_args_unsigned_loop_sle0* [[TMP13]], i32 0, i32 2, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[GEP_UB_ADDR]] to i8*, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[UB_ADDR]] to i8*, !dbg [[DBG67]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP17]], i8* align 4 [[TMP18]], i64 4, i1 false), !dbg [[DBG67]]
; CHECK-NEXT:    [[GEP_STEP_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SLE0]], %nanos6_task_args_unsigned_loop_sle0* [[TMP13]], i32 0, i32 3, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[GEP_STEP_ADDR]] to i8*, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[STEP_ADDR]] to i8*, !dbg [[DBG67]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP19]], i8* align 4 [[TMP20]], i64 4, i1 false), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP21:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG67]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP21]]), !dbg [[DBG67]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG67]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG68:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @compute_lb.13(i32* [[LB_ADDR]]), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_ub.14(i32* [[UB_ADDR]]), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_step.15(i32* [[STEP_ADDR]]), !dbg [[DBG67]]
; CHECK-NEXT:    store i32 [[TMP22]], i32* [[I]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG67]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP26:%.*]] = icmp ule i32 [[TMP25]], [[TMP23]], !dbg [[DBG67]]
; CHECK-NEXT:    br i1 [[TMP26]], label [[TMP27:%.*]], label [[FOR_END:%.*]], !dbg [[DBG67]]
; CHECK:       27:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG67]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG68]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG67]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP28:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP28]], [[TMP24]], !dbg [[DBG67]]
; CHECK-NEXT:    store i32 [[TMP29]], i32* [[I]], align 4, !dbg [[DBG67]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG67]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG67]]
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ne i32 [[TMP30]], 0, !dbg [[DBG67]]
; CHECK-NEXT:    br i1 [[TMP31]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG67]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG67]]
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %lb.addr, align 4, !dbg !70
  store i32 %0, i32* %i, align 4, !dbg !71
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.FIRSTPRIVATE"(i32* %lb.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %ub.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %step.addr), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 (i32*)* @compute_lb.13, i32* %lb.addr), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 (i32*)* @compute_ub.14, i32* %ub.addr), "QUAL.OSS.LOOP.STEP"(i32 (i32*)* @compute_step.15, i32* %step.addr), "QUAL.OSS.LOOP.TYPE"(i64 1, i64 0, i64 0, i64 0, i64 0) ], !dbg !72
  call void @llvm.directive.region.exit(token %1), !dbg !73
  ret void, !dbg !74
}

define internal i32 @compute_lb.13(i32* %lb) #2 !dbg !75 {
entry:
  %lb.addr = alloca i32*, align 8
  store i32* %lb, i32** %lb.addr, align 8
  %0 = load i32, i32* %lb, align 4, !dbg !76
  ret i32 %0, !dbg !76
}

define internal i32 @compute_ub.14(i32* %ub) #2 !dbg !77 {
entry:
  %ub.addr = alloca i32*, align 8
  store i32* %ub, i32** %ub.addr, align 8
  %0 = load i32, i32* %ub, align 4, !dbg !78
  ret i32 %0, !dbg !78
}

define internal i32 @compute_step.15(i32* %step) #2 !dbg !79 {
entry:
  %step.addr = alloca i32*, align 8
  store i32* %step, i32** %step.addr, align 8
  %0 = load i32, i32* %step, align 4, !dbg !80
  ret i32 %0, !dbg !80
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @unsigned_loop_sgt(i32 %lb, i32 %ub, i32 %step) #0 !dbg !81 {
; CHECK-LABEL: @unsigned_loop_sgt(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[UB_ADDR]], align 4, !dbg [[DBG76:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[I]], align 4, !dbg [[DBG77:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_unsigned_loop_sgt0*, align 8, !dbg [[DBG78:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG78]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG78]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG78]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_unsigned_loop_sgt0** [[TMP1]] to i8**, !dbg [[DBG78]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_lb.16(i32* [[UB_ADDR]]), !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_ub.17(i32* [[LB_ADDR]]), !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_step.18(i32* [[STEP_ADDR]]), !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP6]], [[TMP5]], !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP9:%.*]] = add i32 [[TMP8]], 1, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP10:%.*]] = udiv i32 [[TMP9]], [[TMP7]], !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], 1, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP12:%.*]] = zext i32 [[TMP11]] to i64, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP13:%.*]] = mul i64 1, [[TMP12]], !dbg [[DBG78]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_unsigned_loop_sgt0, %nanos6_task_invocation_info_t* @task_invocation_info_unsigned_loop_sgt0, i64 16, i8** [[TMP3]], i8** [[TMP2]], i64 8, i64 [[TMP4]], i64 0, i64 [[TMP13]], i64 0, i64 0), !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP14:%.*]] = load %nanos6_task_args_unsigned_loop_sgt0*, %nanos6_task_args_unsigned_loop_sgt0** [[TMP1]], align 8, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast %nanos6_task_args_unsigned_loop_sgt0* [[TMP14]] to i8*, !dbg [[DBG78]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP15]], i64 16, !dbg [[DBG78]]
; CHECK-NEXT:    [[GEP_UB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SGT0:%.*]], %nanos6_task_args_unsigned_loop_sgt0* [[TMP14]], i32 0, i32 1, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[GEP_UB_ADDR]] to i8*, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[UB_ADDR]] to i8*, !dbg [[DBG78]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP16]], i8* align 4 [[TMP17]], i64 4, i1 false), !dbg [[DBG78]]
; CHECK-NEXT:    [[GEP_LB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SGT0]], %nanos6_task_args_unsigned_loop_sgt0* [[TMP14]], i32 0, i32 2, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[GEP_LB_ADDR]] to i8*, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[LB_ADDR]] to i8*, !dbg [[DBG78]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP18]], i8* align 4 [[TMP19]], i64 4, i1 false), !dbg [[DBG78]]
; CHECK-NEXT:    [[GEP_STEP_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SGT0]], %nanos6_task_args_unsigned_loop_sgt0* [[TMP14]], i32 0, i32 3, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[GEP_STEP_ADDR]] to i8*, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast i32* [[STEP_ADDR]] to i8*, !dbg [[DBG78]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP20]], i8* align 4 [[TMP21]], i64 4, i1 false), !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP22:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG78]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP22]]), !dbg [[DBG78]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG78]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG79:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_lb.16(i32* [[UB_ADDR]]), !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_ub.17(i32* [[LB_ADDR]]), !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @compute_step.18(i32* [[STEP_ADDR]]), !dbg [[DBG78]]
; CHECK-NEXT:    store i32 [[TMP23]], i32* [[I]], align 4, !dbg [[DBG78]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG78]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP27:%.*]] = icmp ugt i32 [[TMP26]], [[TMP24]], !dbg [[DBG78]]
; CHECK-NEXT:    br i1 [[TMP27]], label [[TMP28:%.*]], label [[FOR_END:%.*]], !dbg [[DBG78]]
; CHECK:       28:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG78]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG79]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG78]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP30:%.*]] = add i32 [[TMP29]], [[TMP25]], !dbg [[DBG78]]
; CHECK-NEXT:    store i32 [[TMP30]], i32* [[I]], align 4, !dbg [[DBG78]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG78]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP31:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG78]]
; CHECK-NEXT:    [[TMP32:%.*]] = icmp ne i32 [[TMP31]], 0, !dbg [[DBG78]]
; CHECK-NEXT:    br i1 [[TMP32]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG78]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG78]]
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %ub.addr, align 4, !dbg !82
  store i32 %0, i32* %i, align 4, !dbg !83
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.FIRSTPRIVATE"(i32* %ub.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %lb.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %step.addr), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 (i32*)* @compute_lb.16, i32* %ub.addr), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 (i32*)* @compute_ub.17, i32* %lb.addr), "QUAL.OSS.LOOP.STEP"(i32 (i32*)* @compute_step.18, i32* %step.addr), "QUAL.OSS.LOOP.TYPE"(i64 2, i64 0, i64 0, i64 0, i64 0) ], !dbg !84
  call void @llvm.directive.region.exit(token %1), !dbg !85
  ret void, !dbg !86
}

define internal i32 @compute_lb.16(i32* %ub) #2 !dbg !87 {
entry:
  %ub.addr = alloca i32*, align 8
  store i32* %ub, i32** %ub.addr, align 8
  %0 = load i32, i32* %ub, align 4, !dbg !88
  ret i32 %0, !dbg !88
}

define internal i32 @compute_ub.17(i32* %lb) #2 !dbg !89 {
entry:
  %lb.addr = alloca i32*, align 8
  store i32* %lb, i32** %lb.addr, align 8
  %0 = load i32, i32* %lb, align 4, !dbg !90
  ret i32 %0, !dbg !90
}

define internal i32 @compute_step.18(i32* %step) #2 !dbg !91 {
entry:
  %step.addr = alloca i32*, align 8
  store i32* %step, i32** %step.addr, align 8
  %0 = load i32, i32* %step, align 4, !dbg !92
  %sub = sub i32 0, %0, !dbg !92
  ret i32 %sub, !dbg !92
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @unsigned_loop_sge(i32 %lb, i32 %ub, i32 %step) #0 !dbg !93 {
; CHECK-LABEL: @unsigned_loop_sge(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[UB_ADDR]], align 4, !dbg [[DBG87:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[I]], align 4, !dbg [[DBG88:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_unsigned_loop_sge0*, align 8, !dbg [[DBG89:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG89]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG89]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG89]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_unsigned_loop_sge0** [[TMP1]] to i8**, !dbg [[DBG89]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_lb.19(i32* [[UB_ADDR]]), !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_ub.20(i32* [[LB_ADDR]]), !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_step.21(i32* [[STEP_ADDR]]), !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP6]], [[TMP5]], !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP9:%.*]] = udiv i32 [[TMP8]], [[TMP7]], !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP11:%.*]] = zext i32 [[TMP10]] to i64, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP12:%.*]] = mul i64 1, [[TMP11]], !dbg [[DBG89]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_unsigned_loop_sge0, %nanos6_task_invocation_info_t* @task_invocation_info_unsigned_loop_sge0, i64 16, i8** [[TMP3]], i8** [[TMP2]], i64 8, i64 [[TMP4]], i64 0, i64 [[TMP12]], i64 0, i64 0), !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP13:%.*]] = load %nanos6_task_args_unsigned_loop_sge0*, %nanos6_task_args_unsigned_loop_sge0** [[TMP1]], align 8, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast %nanos6_task_args_unsigned_loop_sge0* [[TMP13]] to i8*, !dbg [[DBG89]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP14]], i64 16, !dbg [[DBG89]]
; CHECK-NEXT:    [[GEP_UB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SGE0:%.*]], %nanos6_task_args_unsigned_loop_sge0* [[TMP13]], i32 0, i32 1, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast i32* [[GEP_UB_ADDR]] to i8*, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[UB_ADDR]] to i8*, !dbg [[DBG89]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP15]], i8* align 4 [[TMP16]], i64 4, i1 false), !dbg [[DBG89]]
; CHECK-NEXT:    [[GEP_LB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SGE0]], %nanos6_task_args_unsigned_loop_sge0* [[TMP13]], i32 0, i32 2, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[GEP_LB_ADDR]] to i8*, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[LB_ADDR]] to i8*, !dbg [[DBG89]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP17]], i8* align 4 [[TMP18]], i64 4, i1 false), !dbg [[DBG89]]
; CHECK-NEXT:    [[GEP_STEP_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_UNSIGNED_LOOP_SGE0]], %nanos6_task_args_unsigned_loop_sge0* [[TMP13]], i32 0, i32 3, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[GEP_STEP_ADDR]] to i8*, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[STEP_ADDR]] to i8*, !dbg [[DBG89]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP19]], i8* align 4 [[TMP20]], i64 4, i1 false), !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP21:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG89]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP21]]), !dbg [[DBG89]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG89]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG90:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP22:%.*]] = call i32 @compute_lb.19(i32* [[UB_ADDR]]), !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_ub.20(i32* [[LB_ADDR]]), !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_step.21(i32* [[STEP_ADDR]]), !dbg [[DBG89]]
; CHECK-NEXT:    store i32 [[TMP22]], i32* [[I]], align 4, !dbg [[DBG89]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG89]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP25:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP26:%.*]] = icmp uge i32 [[TMP25]], [[TMP23]], !dbg [[DBG89]]
; CHECK-NEXT:    br i1 [[TMP26]], label [[TMP27:%.*]], label [[FOR_END:%.*]], !dbg [[DBG89]]
; CHECK:       27:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG89]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG90]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG89]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP28:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP29:%.*]] = add i32 [[TMP28]], [[TMP24]], !dbg [[DBG89]]
; CHECK-NEXT:    store i32 [[TMP29]], i32* [[I]], align 4, !dbg [[DBG89]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG89]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP30:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG89]]
; CHECK-NEXT:    [[TMP31:%.*]] = icmp ne i32 [[TMP30]], 0, !dbg [[DBG89]]
; CHECK-NEXT:    br i1 [[TMP31]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG89]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG89]]
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %ub.addr, align 4, !dbg !94
  store i32 %0, i32* %i, align 4, !dbg !95
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.FIRSTPRIVATE"(i32* %ub.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %lb.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %step.addr), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 (i32*)* @compute_lb.19, i32* %ub.addr), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 (i32*)* @compute_ub.20, i32* %lb.addr), "QUAL.OSS.LOOP.STEP"(i32 (i32*)* @compute_step.21, i32* %step.addr), "QUAL.OSS.LOOP.TYPE"(i64 3, i64 0, i64 0, i64 0, i64 0) ], !dbg !96
  call void @llvm.directive.region.exit(token %1), !dbg !97
  ret void, !dbg !98
}

define internal i32 @compute_lb.19(i32* %ub) #2 !dbg !99 {
entry:
  %ub.addr = alloca i32*, align 8
  store i32* %ub, i32** %ub.addr, align 8
  %0 = load i32, i32* %ub, align 4, !dbg !100
  ret i32 %0, !dbg !100
}

define internal i32 @compute_ub.20(i32* %lb) #2 !dbg !101 {
entry:
  %lb.addr = alloca i32*, align 8
  store i32* %lb, i32** %lb.addr, align 8
  %0 = load i32, i32* %lb, align 4, !dbg !102
  ret i32 %0, !dbg !102
}

define internal i32 @compute_step.21(i32* %step) #2 !dbg !103 {
entry:
  %step.addr = alloca i32*, align 8
  store i32* %step, i32** %step.addr, align 8
  %0 = load i32, i32* %step, align 4, !dbg !104
  %sub = sub i32 0, %0, !dbg !104
  ret i32 %sub, !dbg !104
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @constants_loop() #0 !dbg !105 {
; CHECK-LABEL: @constants_loop(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, i32* [[I]], align 4, !dbg [[DBG98:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args_constants_loop0*, align 8, !dbg [[DBG99:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca i8*, align 8, !dbg [[DBG99]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG99]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG99]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast %nanos6_task_args_constants_loop0** [[TMP0]] to i8**, !dbg [[DBG99]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_lb.22(), !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_ub.23(), !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_step.24(), !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP4]], !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP7]], 1, !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP9:%.*]] = sdiv i32 [[TMP8]], [[TMP6]], !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1, !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext i32 [[TMP10]] to i64, !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP12:%.*]] = mul i64 1, [[TMP11]], !dbg [[DBG99]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_constants_loop0, %nanos6_task_invocation_info_t* @task_invocation_info_constants_loop0, i64 16, i8** [[TMP2]], i8** [[TMP1]], i64 8, i64 [[TMP3]], i64 0, i64 [[TMP12]], i64 0, i64 0), !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP13:%.*]] = load %nanos6_task_args_constants_loop0*, %nanos6_task_args_constants_loop0** [[TMP0]], align 8, !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP14:%.*]] = bitcast %nanos6_task_args_constants_loop0* [[TMP13]] to i8*, !dbg [[DBG99]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP14]], i64 16, !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP15:%.*]] = load i8*, i8** [[TMP1]], align 8, !dbg [[DBG99]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP15]]), !dbg [[DBG99]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG99]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG100:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP16:%.*]] = call i32 @compute_lb.22(), !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP17:%.*]] = call i32 @compute_ub.23(), !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP18:%.*]] = call i32 @compute_step.24(), !dbg [[DBG99]]
; CHECK-NEXT:    store i32 [[TMP16]], i32* [[I]], align 4, !dbg [[DBG99]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG99]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP19:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP20:%.*]] = icmp slt i32 [[TMP19]], [[TMP17]], !dbg [[DBG99]]
; CHECK-NEXT:    br i1 [[TMP20]], label [[TMP21:%.*]], label [[FOR_END:%.*]], !dbg [[DBG99]]
; CHECK:       21:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG99]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG100]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG99]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP22:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP23:%.*]] = add i32 [[TMP22]], [[TMP18]], !dbg [[DBG99]]
; CHECK-NEXT:    store i32 [[TMP23]], i32* [[I]], align 4, !dbg [[DBG99]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG99]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG99]]
; CHECK-NEXT:    [[TMP25:%.*]] = icmp ne i32 [[TMP24]], 0, !dbg [[DBG99]]
; CHECK-NEXT:    br i1 [[TMP25]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG99]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG99]]
;
entry:
  %i = alloca i32, align 4
  store i32 0, i32* %i, align 4, !dbg !106
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASK.FOR\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 ()* @compute_lb.22), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 ()* @compute_ub.23), "QUAL.OSS.LOOP.STEP"(i32 ()* @compute_step.24), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !107
  call void @llvm.directive.region.exit(token %0), !dbg !108
  ret void, !dbg !109
}

define internal i32 @compute_lb.22() #2 !dbg !110 {
entry:
  ret i32 0, !dbg !111
}

define internal i32 @compute_ub.23() #2 !dbg !112 {
entry:
  ret i32 10, !dbg !113
}

define internal i32 @compute_step.24() #2 !dbg !114 {
entry:
  ret i32 1, !dbg !115
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6}
!llvm.ident = !{!7}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "task_for_cond_and_register_check.ll", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"uwtable", i32 1}
!6 = !{i32 7, !"frame-pointer", i32 2}
!7 = !{!""}
!8 = distinct !DISubprogram(name: "signed_loop_slt", scope: !1, file: !1, line: 1, type: !9, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!9 = !DISubroutineType(types: !2)
!10 = !DILocation(line: 3, column: 18, scope: !8)
!11 = !DILocation(line: 3, column: 14, scope: !8)
!12 = !DILocation(line: 3, column: 10, scope: !8)
!13 = !DILocation(line: 3, column: 42, scope: !8)
!14 = !DILocation(line: 4, column: 1, scope: !8)
!15 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!16 = !DILocation(line: 3, column: 18, scope: !15)
!17 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!18 = !DILocation(line: 3, column: 26, scope: !17)
!19 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!20 = !DILocation(line: 3, column: 35, scope: !19)
!21 = distinct !DISubprogram(name: "signed_loop_sle", scope: !1, file: !1, line: 5, type: !9, scopeLine: 5, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!22 = !DILocation(line: 7, column: 18, scope: !21)
!23 = !DILocation(line: 7, column: 14, scope: !21)
!24 = !DILocation(line: 7, column: 10, scope: !21)
!25 = !DILocation(line: 7, column: 43, scope: !21)
!26 = !DILocation(line: 8, column: 1, scope: !21)
!27 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!28 = !DILocation(line: 7, column: 18, scope: !27)
!29 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!30 = !DILocation(line: 7, column: 27, scope: !29)
!31 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!32 = !DILocation(line: 7, column: 36, scope: !31)
!33 = distinct !DISubprogram(name: "signed_loop_sgt", scope: !1, file: !1, line: 9, type: !9, scopeLine: 9, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!34 = !DILocation(line: 11, column: 18, scope: !33)
!35 = !DILocation(line: 11, column: 14, scope: !33)
!36 = !DILocation(line: 11, column: 10, scope: !33)
!37 = !DILocation(line: 11, column: 42, scope: !33)
!38 = !DILocation(line: 12, column: 1, scope: !33)
!39 = distinct !DISubprogram(linkageName: "compute_lb.4", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!40 = !DILocation(line: 11, column: 18, scope: !39)
!41 = distinct !DISubprogram(linkageName: "compute_ub.5", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!42 = !DILocation(line: 11, column: 26, scope: !41)
!43 = distinct !DISubprogram(linkageName: "compute_step.6", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!44 = !DILocation(line: 11, column: 35, scope: !43)
!45 = distinct !DISubprogram(name: "signed_loop_sge", scope: !1, file: !1, line: 13, type: !9, scopeLine: 13, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!46 = !DILocation(line: 15, column: 18, scope: !45)
!47 = !DILocation(line: 15, column: 14, scope: !45)
!48 = !DILocation(line: 15, column: 10, scope: !45)
!49 = !DILocation(line: 15, column: 43, scope: !45)
!50 = !DILocation(line: 16, column: 1, scope: !45)
!51 = distinct !DISubprogram(linkageName: "compute_lb.7", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!52 = !DILocation(line: 15, column: 18, scope: !51)
!53 = distinct !DISubprogram(linkageName: "compute_ub.8", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!54 = !DILocation(line: 15, column: 27, scope: !53)
!55 = distinct !DISubprogram(linkageName: "compute_step.9", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!56 = !DILocation(line: 15, column: 36, scope: !55)
!57 = distinct !DISubprogram(name: "unsigned_loop_slt", scope: !1, file: !1, line: 17, type: !9, scopeLine: 17, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!58 = !DILocation(line: 19, column: 23, scope: !57)
!59 = !DILocation(line: 19, column: 19, scope: !57)
!60 = !DILocation(line: 19, column: 10, scope: !57)
!61 = !DILocation(line: 19, column: 47, scope: !57)
!62 = !DILocation(line: 20, column: 1, scope: !57)
!63 = distinct !DISubprogram(linkageName: "compute_lb.10", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!64 = !DILocation(line: 19, column: 23, scope: !63)
!65 = distinct !DISubprogram(linkageName: "compute_ub.11", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!66 = !DILocation(line: 19, column: 31, scope: !65)
!67 = distinct !DISubprogram(linkageName: "compute_step.12", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!68 = !DILocation(line: 19, column: 40, scope: !67)
!69 = distinct !DISubprogram(name: "unsigned_loop_sle", scope: !1, file: !1, line: 21, type: !9, scopeLine: 21, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!70 = !DILocation(line: 23, column: 23, scope: !69)
!71 = !DILocation(line: 23, column: 19, scope: !69)
!72 = !DILocation(line: 23, column: 10, scope: !69)
!73 = !DILocation(line: 23, column: 48, scope: !69)
!74 = !DILocation(line: 24, column: 1, scope: !69)
!75 = distinct !DISubprogram(linkageName: "compute_lb.13", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!76 = !DILocation(line: 23, column: 23, scope: !75)
!77 = distinct !DISubprogram(linkageName: "compute_ub.14", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!78 = !DILocation(line: 23, column: 32, scope: !77)
!79 = distinct !DISubprogram(linkageName: "compute_step.15", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!80 = !DILocation(line: 23, column: 41, scope: !79)
!81 = distinct !DISubprogram(name: "unsigned_loop_sgt", scope: !1, file: !1, line: 25, type: !9, scopeLine: 25, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!82 = !DILocation(line: 27, column: 23, scope: !81)
!83 = !DILocation(line: 27, column: 19, scope: !81)
!84 = !DILocation(line: 27, column: 10, scope: !81)
!85 = !DILocation(line: 27, column: 47, scope: !81)
!86 = !DILocation(line: 28, column: 1, scope: !81)
!87 = distinct !DISubprogram(linkageName: "compute_lb.16", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!88 = !DILocation(line: 27, column: 23, scope: !87)
!89 = distinct !DISubprogram(linkageName: "compute_ub.17", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!90 = !DILocation(line: 27, column: 31, scope: !89)
!91 = distinct !DISubprogram(linkageName: "compute_step.18", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!92 = !DILocation(line: 27, column: 40, scope: !91)
!93 = distinct !DISubprogram(name: "unsigned_loop_sge", scope: !1, file: !1, line: 29, type: !9, scopeLine: 29, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!94 = !DILocation(line: 31, column: 23, scope: !93)
!95 = !DILocation(line: 31, column: 19, scope: !93)
!96 = !DILocation(line: 31, column: 10, scope: !93)
!97 = !DILocation(line: 31, column: 48, scope: !93)
!98 = !DILocation(line: 32, column: 1, scope: !93)
!99 = distinct !DISubprogram(linkageName: "compute_lb.19", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!100 = !DILocation(line: 31, column: 23, scope: !99)
!101 = distinct !DISubprogram(linkageName: "compute_ub.20", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!102 = !DILocation(line: 31, column: 32, scope: !101)
!103 = distinct !DISubprogram(linkageName: "compute_step.21", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!104 = !DILocation(line: 31, column: 41, scope: !103)
!105 = distinct !DISubprogram(name: "constants_loop", scope: !1, file: !1, line: 33, type: !9, scopeLine: 33, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!106 = !DILocation(line: 35, column: 14, scope: !105)
!107 = !DILocation(line: 35, column: 10, scope: !105)
!108 = !DILocation(line: 35, column: 38, scope: !105)
!109 = !DILocation(line: 36, column: 1, scope: !105)
!110 = distinct !DISubprogram(linkageName: "compute_lb.22", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!111 = !DILocation(line: 35, column: 18, scope: !110)
!112 = distinct !DISubprogram(linkageName: "compute_ub.23", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!113 = !DILocation(line: 35, column: 25, scope: !112)
!114 = distinct !DISubprogram(linkageName: "compute_step.24", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!115 = !DILocation(line: 35, column: 34, scope: !114)

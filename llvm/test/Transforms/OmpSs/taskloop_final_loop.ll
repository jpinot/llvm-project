; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 'taskloop_final_loop.ll'
source_filename = "taskloop_final_loop.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Checking only that we build the loop in final context correctly

@sum = dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @taskloop(i32 %lb, i32 %ub, i32 %step) #0 !dbg !8 {
; CHECK-LABEL: @taskloop(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[LB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[UB_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[STEP_ADDR:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 [[LB:%.*]], i32* [[LB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[UB:%.*]], i32* [[UB_ADDR]], align 4
; CHECK-NEXT:    store i32 [[STEP:%.*]], i32* [[STEP_ADDR]], align 4
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, i32* [[LB_ADDR]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    store i32 [[TMP0]], i32* [[I]], align 4, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca %nanos6_task_args_taskloop0*, align 8, !dbg [[DBG12:![0-9]+]]
; CHECK-NEXT:    [[TMP2:%.*]] = alloca i8*, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG12]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP3:%.*]] = bitcast %nanos6_task_args_taskloop0** [[TMP1]] to i8**, !dbg [[DBG12]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP4:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_lb(i32* [[LB_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_ub(i32* [[UB_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP7:%.*]] = call i32 @compute_step(i32* [[STEP_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP6]], [[TMP5]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP9:%.*]] = sub i32 [[TMP8]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP10:%.*]] = sdiv i32 [[TMP9]], [[TMP7]], !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP11:%.*]] = add i32 [[TMP10]], 1, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP12:%.*]] = sext i32 [[TMP11]] to i64, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP13:%.*]] = mul i64 1, [[TMP12]], !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_taskloop0, %nanos6_task_invocation_info_t* @task_invocation_info_taskloop0, i64 32, i8** [[TMP3]], i8** [[TMP2]], i64 4, i64 [[TMP4]], i64 0, i64 [[TMP13]], i64 0, i64 0), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP14:%.*]] = load %nanos6_task_args_taskloop0*, %nanos6_task_args_taskloop0** [[TMP1]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP15:%.*]] = bitcast %nanos6_task_args_taskloop0* [[TMP14]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP15]], i64 32, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_SUM:%.*]] = getelementptr [[NANOS6_TASK_ARGS_TASKLOOP0:%.*]], %nanos6_task_args_taskloop0* [[TMP14]], i32 0, i32 0, !dbg [[DBG12]]
; CHECK-NEXT:    store i32* @sum, i32** [[GEP_SUM]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_LB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_TASKLOOP0]], %nanos6_task_args_taskloop0* [[TMP14]], i32 0, i32 2, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP16:%.*]] = bitcast i32* [[GEP_LB_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP17:%.*]] = bitcast i32* [[LB_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP16]], i8* align 4 [[TMP17]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_UB_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_TASKLOOP0]], %nanos6_task_args_taskloop0* [[TMP14]], i32 0, i32 3, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP18:%.*]] = bitcast i32* [[GEP_UB_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP19:%.*]] = bitcast i32* [[UB_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP18]], i8* align 4 [[TMP19]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[GEP_STEP_ADDR:%.*]] = getelementptr [[NANOS6_TASK_ARGS_TASKLOOP0]], %nanos6_task_args_taskloop0* [[TMP14]], i32 0, i32 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP20:%.*]] = bitcast i32* [[GEP_STEP_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP21:%.*]] = bitcast i32* [[STEP_ADDR]] to i8*, !dbg [[DBG12]]
; CHECK-NEXT:    call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 [[TMP20]], i8* align 4 [[TMP21]], i64 4, i1 false), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP22:%.*]] = load i8*, i8** [[TMP2]], align 8, !dbg [[DBG12]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP22]]), !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_END3:%.*]], !dbg [[DBG12]]
; CHECK:       final.end:
; CHECK-NEXT:    ret void, !dbg [[DBG13:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP23:%.*]] = call i32 @compute_lb(i32* [[LB_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP24:%.*]] = call i32 @compute_ub(i32* [[UB_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP25:%.*]] = call i32 @compute_step(i32* [[STEP_ADDR]]), !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP23]], i32* [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG12]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP26:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP27:%.*]] = icmp slt i32 [[TMP26]], [[TMP24]], !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP27]], label [[TMP28:%.*]], label [[FOR_END:%.*]], !dbg [[DBG12]]
; CHECK:       28:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG12]]
; CHECK:       for.body:
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG14:![0-9]+]]
; CHECK-NEXT:    [[TMP30:%.*]] = load i32, i32* @sum, align 4, !dbg [[DBG15:![0-9]+]]
; CHECK-NEXT:    [[ADD_CLONE:%.*]] = add nsw i32 [[TMP30]], [[TMP29]], !dbg [[DBG15]]
; CHECK-NEXT:    store i32 [[ADD_CLONE]], i32* @sum, align 4, !dbg [[DBG15]]
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG13]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG12]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP31:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP32:%.*]] = add i32 [[TMP31]], [[TMP25]], !dbg [[DBG12]]
; CHECK-NEXT:    store i32 [[TMP32]], i32* [[I]], align 4, !dbg [[DBG12]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG12]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG12]]
; CHECK-NEXT:    [[TMP34:%.*]] = icmp ne i32 [[TMP33]], 0, !dbg [[DBG12]]
; CHECK-NEXT:    br i1 [[TMP34]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG12]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG12]]
;
entry:
  %lb.addr = alloca i32, align 4
  %ub.addr = alloca i32, align 4
  %step.addr = alloca i32, align 4
  %i = alloca i32, align 4
  store i32 %lb, i32* %lb.addr, align 4
  store i32 %ub, i32* %ub.addr, align 4
  store i32 %step, i32* %step.addr, align 4
  %0 = load i32, i32* %lb.addr, align 4, !dbg !10
  store i32 %0, i32* %i, align 4, !dbg !11
  %1 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.SHARED"(i32* @sum), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.FIRSTPRIVATE"(i32* %lb.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %ub.addr), "QUAL.OSS.FIRSTPRIVATE"(i32* %step.addr), "QUAL.OSS.LOOP.IND.VAR"(i32* %i), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 (i32*)* @compute_lb, i32* %lb.addr), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 (i32*)* @compute_ub, i32* %ub.addr), "QUAL.OSS.LOOP.STEP"(i32 (i32*)* @compute_step, i32* %step.addr), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !12
  %2 = load i32, i32* %i, align 4, !dbg !13
  %3 = load i32, i32* @sum, align 4, !dbg !14
  %add = add nsw i32 %3, %2, !dbg !14
  store i32 %add, i32* @sum, align 4, !dbg !14
  call void @llvm.directive.region.exit(token %1), !dbg !15
  ret void, !dbg !16
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb(i32* %lb) #2 !dbg !17 {
entry:
  %lb.addr = alloca i32*, align 8
  store i32* %lb, i32** %lb.addr, align 8
  %0 = load i32, i32* %lb, align 4, !dbg !18
  ret i32 %0, !dbg !18
}

define internal i32 @compute_ub(i32* %ub) #2 !dbg !19 {
entry:
  %ub.addr = alloca i32*, align 8
  store i32* %ub, i32** %ub.addr, align 8
  %0 = load i32, i32* %ub, align 4, !dbg !20
  ret i32 %0, !dbg !20
}

define internal i32 @compute_step(i32* %step) #2 !dbg !21 {
entry:
  %step.addr = alloca i32*, align 8
  store i32* %step, i32** %step.addr, align 8
  %0 = load i32, i32* %step, align 4, !dbg !22
  ret i32 %0, !dbg !22
}

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5, !6}
!llvm.ident = !{!7}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "human", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "taskloop_final_loop.ll", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{i32 7, !"uwtable", i32 1}
!6 = !{i32 7, !"frame-pointer", i32 2}
!7 = !{!""}
!8 = distinct !DISubprogram(name: "taskloop", scope: !1, file: !1, line: 2, type: !9, scopeLine: 2, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!9 = !DISubroutineType(types: !2)
!10 = !DILocation(line: 4, column: 18, scope: !8)
!11 = !DILocation(line: 4, column: 14, scope: !8)
!12 = !DILocation(line: 4, column: 10, scope: !8)
!13 = !DILocation(line: 5, column: 12, scope: !8)
!14 = !DILocation(line: 5, column: 9, scope: !8)
!15 = !DILocation(line: 5, column: 5, scope: !8)
!16 = !DILocation(line: 6, column: 1, scope: !8)
!17 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!18 = !DILocation(line: 4, column: 18, scope: !17)
!19 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!20 = !DILocation(line: 4, column: 26, scope: !19)
!21 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !9, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!22 = !DILocation(line: 4, column: 35, scope: !21)

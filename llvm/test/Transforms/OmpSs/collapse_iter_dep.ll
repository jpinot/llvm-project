; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt %s -ompss-2 -S | FileCheck %s
; ModuleID = 'collapse_iter_dep.ll'
source_filename = "collapse_iter_dep.ll"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Check we build skip unwanted iterations when doing a estimation of
; the number of iterations

; int main() {
;     #pragma oss taskloop collapse(2)
;     for (int i = 0; i < 10; ++i) {
;         for (int j = 0; j < i; ++j) {
;         }
;     }
; }

; Function Attrs: noinline nounwind optnone
define dso_local i32 @main() #0 !dbg !6 {
; CHECK-LABEL: @main(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[I:%.*]] = alloca i32, align 4
; CHECK-NEXT:    [[J:%.*]] = alloca i32, align 4
; CHECK-NEXT:    store i32 0, i32* [[I]], align 4, !dbg [[DBG9:![0-9]+]]
; CHECK-NEXT:    store i32 0, i32* [[J]], align 4, !dbg [[DBG10:![0-9]+]]
; CHECK-NEXT:    [[TMP0:%.*]] = alloca %nanos6_task_args_main0*, align 8, !dbg [[DBG11:![0-9]+]]
; CHECK-NEXT:    [[TMP1:%.*]] = alloca i8*, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[NUM_DEPS:%.*]] = alloca i64, align 8, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FINAL_COND:%.*]], !dbg [[DBG11]]
; CHECK:       codeRepl:
; CHECK-NEXT:    [[TMP2:%.*]] = bitcast %nanos6_task_args_main0** [[TMP0]] to i8**, !dbg [[DBG11]]
; CHECK-NEXT:    store i64 0, i64* [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP3:%.*]] = load i64, i64* [[NUM_DEPS]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP4:%.*]] = call i32 @compute_lb(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP5:%.*]] = call i32 @compute_ub(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP6:%.*]] = call i32 @compute_step(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP7:%.*]] = sub i32 [[TMP5]], [[TMP4]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP8:%.*]] = sub i32 [[TMP7]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP9:%.*]] = sdiv i32 [[TMP8]], [[TMP6]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP10:%.*]] = add i32 [[TMP9]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP11:%.*]] = sext i32 [[TMP10]] to i64, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP12:%.*]] = sub i32 [[TMP5]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP4]], i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP13:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP12]], i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP14:%.*]] = call i32 @compute_ub.2(i32* [[I]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP15:%.*]] = call i32 @compute_step.3(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP16:%.*]] = sub i32 [[TMP14]], [[TMP13]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP17:%.*]] = sub i32 [[TMP16]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP18:%.*]] = sdiv i32 [[TMP17]], [[TMP15]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP19:%.*]] = add i32 [[TMP18]], 1, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP20:%.*]] = sext i32 [[TMP19]] to i64, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP21:%.*]] = mul i64 1, [[TMP11]], !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP22:%.*]] = mul i64 [[TMP21]], [[TMP20]], !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_create_loop(%nanos6_task_info_t* @task_info_var_main0, %nanos6_task_invocation_info_t* @task_invocation_info_main0, i64 16, i8** [[TMP2]], i8** [[TMP1]], i64 4, i64 [[TMP3]], i64 0, i64 [[TMP22]], i64 0, i64 0), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP23:%.*]] = load %nanos6_task_args_main0*, %nanos6_task_args_main0** [[TMP0]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP24:%.*]] = bitcast %nanos6_task_args_main0* [[TMP23]] to i8*, !dbg [[DBG11]]
; CHECK-NEXT:    [[ARGS_END:%.*]] = getelementptr i8, i8* [[TMP24]], i64 16, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP25:%.*]] = load i8*, i8** [[TMP1]], align 8, !dbg [[DBG11]]
; CHECK-NEXT:    call void @nanos6_submit_task(i8* [[TMP25]]), !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_END7:%.*]], !dbg [[DBG11]]
; CHECK:       final.end:
; CHECK-NEXT:    ret i32 0, !dbg [[DBG12:![0-9]+]]
; CHECK:       final.then:
; CHECK-NEXT:    [[TMP26:%.*]] = call i32 @compute_lb(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP27:%.*]] = call i32 @compute_ub(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP28:%.*]] = call i32 @compute_step(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP26]], i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND1:%.*]], !dbg [[DBG11]]
; CHECK:       for.cond1:
; CHECK-NEXT:    [[TMP29:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP30:%.*]] = icmp slt i32 [[TMP29]], [[TMP27]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP30]], label [[TMP31:%.*]], label [[FOR_END3:%.*]], !dbg [[DBG11]]
; CHECK:       31:
; CHECK-NEXT:    br label [[TMP32:%.*]], !dbg [[DBG11]]
; CHECK:       32:
; CHECK-NEXT:    br label [[FOR_BODY2:%.*]], !dbg [[DBG11]]
; CHECK:       for.body2:
; CHECK-NEXT:    [[TMP33:%.*]] = call i32 @compute_lb.1(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP34:%.*]] = call i32 @compute_ub.2(i32* [[I]]), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP35:%.*]] = call i32 @compute_step.3(), !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP33]], i32* [[J]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND:%.*]], !dbg [[DBG11]]
; CHECK:       for.cond:
; CHECK-NEXT:    [[TMP36:%.*]] = load i32, i32* [[J]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP37:%.*]] = icmp slt i32 [[TMP36]], [[TMP34]], !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP37]], label [[TMP38:%.*]], label [[FOR_END:%.*]], !dbg [[DBG11]]
; CHECK:       38:
; CHECK-NEXT:    br label [[TMP39:%.*]], !dbg [[DBG11]]
; CHECK:       39:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]], !dbg [[DBG11]]
; CHECK:       for.body:
; CHECK-NEXT:    br label [[FOR_INCR:%.*]], !dbg [[DBG12]]
; CHECK:       for.end:
; CHECK-NEXT:    br label [[FOR_INCR4:%.*]], !dbg [[DBG11]]
; CHECK:       for.incr:
; CHECK-NEXT:    [[TMP40:%.*]] = load i32, i32* [[J]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP41:%.*]] = add i32 [[TMP40]], [[TMP35]], !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP41]], i32* [[J]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND]], !dbg [[DBG11]]
; CHECK:       for.end3:
; CHECK-NEXT:    br label [[FINAL_END:%.*]], !dbg [[DBG11]]
; CHECK:       for.incr4:
; CHECK-NEXT:    [[TMP42:%.*]] = load i32, i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP43:%.*]] = add i32 [[TMP42]], [[TMP28]], !dbg [[DBG11]]
; CHECK-NEXT:    store i32 [[TMP43]], i32* [[I]], align 4, !dbg [[DBG11]]
; CHECK-NEXT:    br label [[FOR_COND1]], !dbg [[DBG11]]
; CHECK:       final.cond:
; CHECK-NEXT:    [[TMP44:%.*]] = call i32 @nanos6_in_final(), !dbg [[DBG11]]
; CHECK-NEXT:    [[TMP45:%.*]] = icmp ne i32 [[TMP44]], 0, !dbg [[DBG11]]
; CHECK-NEXT:    br i1 [[TMP45]], label [[FINAL_THEN:%.*]], label [[CODEREPL:%.*]], !dbg [[DBG11]]
; CHECK:       for.end7:
; CHECK-NEXT:    br label [[FINAL_END]], !dbg [[DBG11]]
;
entry:
  %i = alloca i32, align 4
  %j = alloca i32, align 4
  store i32 0, i32* %i, align 4, !dbg !9
  store i32 0, i32* %j, align 4, !dbg !10
  %0 = call token @llvm.directive.region.entry() [ "DIR.OSS"([9 x i8] c"TASKLOOP\00"), "QUAL.OSS.PRIVATE"(i32* %i), "QUAL.OSS.PRIVATE"(i32* %j), "QUAL.OSS.LOOP.IND.VAR"(i32* %i, i32* %j), "QUAL.OSS.LOOP.LOWER.BOUND"(i32 ()* @compute_lb, i32 ()* @compute_lb.1), "QUAL.OSS.LOOP.UPPER.BOUND"(i32 ()* @compute_ub, i32 (i32*)* @compute_ub.2, i32* %i), "QUAL.OSS.LOOP.STEP"(i32 ()* @compute_step, i32 ()* @compute_step.3), "QUAL.OSS.LOOP.TYPE"(i64 0, i64 1, i64 1, i64 1, i64 1, i64 0, i64 1, i64 1, i64 1, i64 1) ], !dbg !11
  call void @llvm.directive.region.exit(token %0), !dbg !12
  ret i32 0, !dbg !13
}

; Function Attrs: nounwind
declare token @llvm.directive.region.entry() #1

; Function Attrs: nounwind
declare void @llvm.directive.region.exit(token) #1

define internal i32 @compute_lb() #2 !dbg !14 {
entry:
  ret i32 0, !dbg !15
}

define internal i32 @compute_ub() #2 !dbg !17 {
entry:
  ret i32 10, !dbg !18
}

define internal i32 @compute_step() #2 !dbg !20 {
entry:
  ret i32 1, !dbg !21
}

define internal i32 @compute_lb.1() #2 !dbg !23 {
entry:
  ret i32 0, !dbg !24
}

define internal i32 @compute_ub.2(i32* %i) #2 !dbg !26 {
entry:
  %i.addr = alloca i32*, align 8
  store i32* %i, i32** %i.addr, align 8
  %0 = load i32, i32* %i, align 4, !dbg !27
  ret i32 %0, !dbg !27
}

define internal i32 @compute_step.3() #2 !dbg !29 {
entry:
  ret i32 1, !dbg !30
}

; CHECK: define internal void @nanos6_unpacked_task_region_main0(i32* %i, i32* %j, %nanos6_loop_bounds_t* %loop_bounds, %nanos6_address_translation_entry_t* %address_translation_table)
; CHECK: newFuncRoot:
; CHECK-NEXT:   br label %0
; CHECK: 0:                                                ; preds = %newFuncRoot
; CHECK-NEXT:   %lb_gep = getelementptr %nanos6_loop_bounds_t, %nanos6_loop_bounds_t* %loop_bounds, i32 0, i32 0
; CHECK-NEXT:   %1 = load i64, i64* %lb_gep, align 8
; CHECK-NEXT:   %ub_gep = getelementptr %nanos6_loop_bounds_t, %nanos6_loop_bounds_t* %loop_bounds, i32 0, i32 1
; CHECK-NEXT:   %2 = load i64, i64* %ub_gep, align 8
; CHECK-NEXT:   %3 = call i32 @compute_lb()
; CHECK-NEXT:   %4 = call i32 @compute_ub()
; CHECK-NEXT:   %5 = call i32 @compute_step()
; CHECK-NEXT:   %6 = sub i32 %4, %3
; CHECK-NEXT:   %7 = sub i32 %6, 1
; CHECK-NEXT:   %8 = sdiv i32 %7, %5
; CHECK-NEXT:   %9 = add i32 %8, 1
; CHECK-NEXT:   %10 = sext i32 %9 to i64
; CHECK-NEXT:   %11 = sub i32 %4, 1
; CHECK-NEXT:   store i32 %3, i32* %i, align 4
; CHECK-NEXT:   %12 = call i32 @compute_lb.1()
; CHECK-NEXT:   store i32 %11, i32* %i, align 4
; CHECK-NEXT:   %13 = call i32 @compute_ub.2(i32* %i)
; CHECK-NEXT:   %14 = call i32 @compute_step.3()
; CHECK-NEXT:   %15 = sub i32 %13, %12
; CHECK-NEXT:   %16 = sub i32 %15, 1
; CHECK-NEXT:   %17 = sdiv i32 %16, %14
; CHECK-NEXT:   %18 = add i32 %17, 1
; CHECK-NEXT:   %19 = sext i32 %18 to i64
; CHECK-NEXT:   %20 = sext i32 %3 to i64
; CHECK-NEXT:   %21 = sext i32 %4 to i64
; CHECK-NEXT:   %loop = alloca i64, align 8
; CHECK-NEXT:   store i64 %1, i64* %loop, align 8
; CHECK-NEXT:   br label %for.cond5
; CHECK: for.cond5:                                        ; preds = %for.incr8, %0
; CHECK-NEXT:   %22 = load i64, i64* %loop, align 8
; CHECK-NEXT:   %23 = icmp ult i64 %22, %2
; CHECK-NEXT:   br i1 %23, label %24, label %.exitStub
; CHECK: 24:                                               ; preds = %for.cond5
; CHECK-NEXT:   %25 = load i64, i64* %loop, align 8
; CHECK-NEXT:   %26 = mul i64 1, %19
; CHECK-NEXT:   %27 = udiv i64 %25, %26
; CHECK-NEXT:   %28 = sext i32 %5 to i64
; CHECK-NEXT:   %29 = mul i64 %27, %28
; CHECK-NEXT:   %30 = sext i32 %3 to i64
; CHECK-NEXT:   %31 = add i64 %29, %30
; CHECK-NEXT:   %32 = mul i64 %27, %26
; CHECK-NEXT:   %33 = sub i64 %25, %32
; CHECK-NEXT:   %34 = trunc i64 %31 to i32
; CHECK-NEXT:   store i32 %34, i32* %i, align 4
; CHECK-NEXT:   br label %35
; CHECK: 35:                                               ; preds = %24
; CHECK-NEXT:   %36 = udiv i64 %33, 1
; CHECK-NEXT:   %37 = sext i32 %14 to i64
; CHECK-NEXT:   %38 = mul i64 %36, %37
; CHECK-NEXT:   %39 = sext i32 %12 to i64
; CHECK-NEXT:   %40 = add i64 %38, %39
; CHECK-NEXT:   %41 = mul i64 %36, 1
; CHECK-NEXT:   %42 = sub i64 %33, %41
; CHECK-NEXT:   %43 = trunc i64 %40 to i32
; CHECK-NEXT:   store i32 %43, i32* %j, align 4
; CHECK-NEXT:   %44 = call i32 @compute_ub.2(i32* %i)
; CHECK-NEXT:   %45 = load i32, i32* %j, align 4
; CHECK-NEXT:   %46 = icmp slt i32 %45, %44
; CHECK-NEXT:   br i1 %46, label %for.body6, label %for.incr8
; CHECK: for.body6:                                        ; preds = %35
; CHECK-NEXT:   br label %for.incr8
; CHECK: for.incr8:                                        ; preds = %35, %for.body6
; CHECK-NEXT:   %47 = load i64, i64* %loop, align 8
; CHECK-NEXT:   %48 = add i64 %47, 1
; CHECK-NEXT:   store i64 %48, i64* %loop, align 8
; CHECK-NEXT:   br label %for.cond5
; CHECK: .exitStub:                                        ; preds = %for.cond5
; CHECK-NEXT:   ret void
; CHECK-NEXT: }
attributes #0 = { noinline nounwind optnone "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-features"="+cx8,+mmx,+sse,+sse2,+x87" }
attributes #1 = { nounwind }
attributes #2 = { "min-legal-vector-width"="0" }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}
!llvm.ident = !{!5}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "", isOptimized: false, runtimeVersion: 0, emissionKind: NoDebug, enums: !2, splitDebugInlining: false, nameTableKind: None)
!1 = !DIFile(filename: "<stdin>", directory: "")
!2 = !{}
!3 = !{i32 2, !"Debug Info Version", i32 3}
!4 = !{i32 1, !"wchar_size", i32 4}
!5 = !{!""}
!6 = distinct !DISubprogram(name: "main", scope: !7, file: !7, line: 1, type: !8, scopeLine: 1, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !2)
!7 = !DIFile(filename: "collapse_iter_dep.ll", directory: "")
!8 = !DISubroutineType(types: !2)
!9 = !DILocation(line: 3, column: 14, scope: !6)
!10 = !DILocation(line: 4, column: 18, scope: !6)
!11 = !DILocation(line: 4, column: 14, scope: !6)
!12 = !DILocation(line: 5, column: 9, scope: !6)
!13 = !DILocation(line: 7, column: 1, scope: !6)
!14 = distinct !DISubprogram(linkageName: "compute_lb", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!15 = !DILocation(line: 3, column: 18, scope: !16)
!16 = !DILexicalBlockFile(scope: !14, file: !7, discriminator: 0)
!17 = distinct !DISubprogram(linkageName: "compute_ub", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!18 = !DILocation(line: 3, column: 25, scope: !19)
!19 = !DILexicalBlockFile(scope: !17, file: !7, discriminator: 0)
!20 = distinct !DISubprogram(linkageName: "compute_step", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!21 = !DILocation(line: 3, column: 29, scope: !22)
!22 = !DILexicalBlockFile(scope: !20, file: !7, discriminator: 0)
!23 = distinct !DISubprogram(linkageName: "compute_lb.1", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!24 = !DILocation(line: 4, column: 22, scope: !25)
!25 = !DILexicalBlockFile(scope: !23, file: !7, discriminator: 0)
!26 = distinct !DISubprogram(linkageName: "compute_ub.2", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!27 = !DILocation(line: 4, column: 29, scope: !28)
!28 = !DILexicalBlockFile(scope: !26, file: !7, discriminator: 0)
!29 = distinct !DISubprogram(linkageName: "compute_step.3", scope: !1, file: !1, type: !8, flags: DIFlagArtificial, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition, unit: !0, retainedNodes: !2)
!30 = !DILocation(line: 4, column: 32, scope: !31)
!31 = !DILexicalBlockFile(scope: !29, file: !7, discriminator: 0)
